!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/3bc6a66f/
APPROACHING_INFINITY	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^#define APPROACHING_INFINITY /;"	d	file:
After	proxy_workdir/taskd-1.1.0/scripts/systemd/taskd.service	/^After=network.target$/;"	k	section:Unit
CMAKE_BUILD_TYPE	proxy_workdir/taskd-1.1.0/cmake.h	/^#define CMAKE_BUILD_TYPE /;"	d
CMAKE_BUILD_TYPE	proxy_workdir/taskd-1.1.0/cmake.h.in	/^#define CMAKE_BUILD_TYPE /;"	d	file:
CMAKE_CXX_FLAGS	proxy_workdir/taskd-1.1.0/CMakeLists.txt	/^set (CMAKE_CXX_FLAGS "${_CXX11_FLAGS} ${CMAKE_CXX_FLAGS}")$/;"	v
CMAKE_CXX_FLAGS	proxy_workdir/taskd-1.1.0/CMakeLists.txt	/^set (CMAKE_CXX_FLAGS "-Wall -Wsign-compare -Wreturn-type ${CMAKE_CXX_FLAGS}")$/;"	v
CMAKE_INSTALL_RPATH_USE_LINK_PATH	proxy_workdir/taskd-1.1.0/CMakeLists.txt	/^   set (CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)$/;"	v
CMAKE_LEGACY_CYGWIN_WIN32	proxy_workdir/taskd-1.1.0/CMakeLists.txt	/^set(CMAKE_LEGACY_CYGWIN_WIN32 0) # Remove when CMake >= 2.8.4 is required$/;"	v
CMAKE_REQUIRED_INCLUDES	proxy_workdir/taskd-1.1.0/CMakeLists.txt	/^    set (CMAKE_REQUIRED_INCLUDES  ${CMAKE_REQUIRED_INCLUDES}  ${UUID_INCLUDE_DIR})$/;"	v
CMAKE_REQUIRED_LIBRARIES	proxy_workdir/taskd-1.1.0/CMakeLists.txt	/^    set (CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES} ${UUID_LIBRARY})$/;"	v
CMAKE_VERSION	proxy_workdir/taskd-1.1.0/cmake.h	/^#define CMAKE_VERSION /;"	d
CMAKE_VERSION	proxy_workdir/taskd-1.1.0/cmake.h.in	/^#define CMAKE_VERSION /;"	d	file:
COMMANDS	proxy_workdir/taskd-1.1.0/doc/man/taskd.1	/^.SH COMMANDS$/;"	s	title:taskd
COMMANDS	proxy_workdir/taskd-1.1.0/doc/man/taskd.1.in	/^.SH COMMANDS$/;"	s	title:taskd
COMMANDS	proxy_workdir/taskd-1.1.0/doc/man/taskdctl.1	/^.SH COMMANDS$/;"	s	title:taskdctl
COMMANDS	proxy_workdir/taskd-1.1.0/doc/man/taskdctl.1.in	/^.SH COMMANDS$/;"	s	title:taskdctl
COMMIT	proxy_workdir/taskd-1.1.0/commit.h	/^#define COMMIT /;"	d
COMMIT	proxy_workdir/taskd-1.1.0/commit.h.in	/^#define COMMIT /;"	d	file:
COMMON	proxy_workdir/taskd-1.1.0/doc/man/taskd.1	/^.SH COMMON OPTIONS$/;"	s	title:taskd
COMMON	proxy_workdir/taskd-1.1.0/doc/man/taskd.1.in	/^.SH COMMON OPTIONS$/;"	s	title:taskd
CONFIGURATION	proxy_workdir/taskd-1.1.0/doc/man/taskd.1	/^.SH CONFIGURATION$/;"	s	title:taskd
CONFIGURATION	proxy_workdir/taskd-1.1.0/doc/man/taskd.1.in	/^.SH CONFIGURATION$/;"	s	title:taskd
CONFIGURATION	proxy_workdir/taskd-1.1.0/doc/man/taskdrc.5	/^.SH CONFIGURATION VARIABLES$/;"	s	title:taskd
CONFIGURATION	proxy_workdir/taskd-1.1.0/doc/man/taskdrc.5.in	/^.SH CONFIGURATION VARIABLES$/;"	s	title:taskd
CPACK_SOURCE_GENERATOR	proxy_workdir/taskd-1.1.0/CMakeLists.txt	/^set (CPACK_SOURCE_GENERATOR "TGZ")$/;"	v
CPACK_SOURCE_IGNORE_FILES	proxy_workdir/taskd-1.1.0/CMakeLists.txt	/^set (CPACK_SOURCE_IGNORE_FILES  "CMakeCache" "CMakeFiles" "CPackConfig" "CPackSourceConfig"$/;"	v
CPACK_SOURCE_PACKAGE_FILE_NAME	proxy_workdir/taskd-1.1.0/CMakeLists.txt	/^set (CPACK_SOURCE_PACKAGE_FILE_NAME ${PACKAGE_NAME}-${PACKAGE_VERSION})$/;"	v
CREDITS & COPYRIGHTS	proxy_workdir/taskd-1.1.0/doc/man/taskd.1	/^.SH "CREDITS & COPYRIGHTS"$/;"	s	title:taskd
CREDITS & COPYRIGHTS	proxy_workdir/taskd-1.1.0/doc/man/taskd.1.in	/^.SH "CREDITS & COPYRIGHTS"$/;"	s	title:taskd
CREDITS & COPYRIGHTS	proxy_workdir/taskd-1.1.0/doc/man/taskdctl.1	/^.SH "CREDITS & COPYRIGHTS"$/;"	s	title:taskdctl
CREDITS & COPYRIGHTS	proxy_workdir/taskd-1.1.0/doc/man/taskdctl.1.in	/^.SH "CREDITS & COPYRIGHTS"$/;"	s	title:taskdctl
CREDITS & COPYRIGHTS	proxy_workdir/taskd-1.1.0/doc/man/taskdrc.5	/^.SH "CREDITS & COPYRIGHTS"$/;"	s	title:taskd
CREDITS & COPYRIGHTS	proxy_workdir/taskd-1.1.0/doc/man/taskdrc.5.in	/^.SH "CREDITS & COPYRIGHTS"$/;"	s	title:taskd
CYGWIN	proxy_workdir/taskd-1.1.0/CMakeLists.txt	/^  set (CYGWIN true)$/;"	v
Color	proxy_workdir/taskd-1.1.0/src/Color.cpp	/^Color::Color ()$/;"	f	class:Color
Color	proxy_workdir/taskd-1.1.0/src/Color.cpp	/^Color::Color (color_id fg)$/;"	f	class:Color
Color	proxy_workdir/taskd-1.1.0/src/Color.cpp	/^Color::Color (color_id fg, color_id bg)$/;"	f	class:Color
Color	proxy_workdir/taskd-1.1.0/src/Color.cpp	/^Color::Color (color_id fg, color_id bg, bool underline, bool bold, bool bright)$/;"	f	class:Color
Color	proxy_workdir/taskd-1.1.0/src/Color.cpp	/^Color::Color (const Color& other)$/;"	f	class:Color
Color	proxy_workdir/taskd-1.1.0/src/Color.cpp	/^Color::Color (const std::string& spec)$/;"	f	class:Color
Color	proxy_workdir/taskd-1.1.0/src/Color.cpp	/^Color::Color (unsigned int c)$/;"	f	class:Color
Color	proxy_workdir/taskd-1.1.0/src/Color.h	/^class Color$/;"	c
Config	proxy_workdir/taskd-1.1.0/src/ConfigFile.cpp	/^Config::Config ()$/;"	f	class:Config
Config	proxy_workdir/taskd-1.1.0/src/ConfigFile.cpp	/^Config::Config (const Config& other)$/;"	f	class:Config
Config	proxy_workdir/taskd-1.1.0/src/ConfigFile.cpp	/^Config::Config (const std::string& file)$/;"	f	class:Config
Config	proxy_workdir/taskd-1.1.0/src/ConfigFile.h	/^class Config : public std::map <std::string, std::string>$/;"	c
DARWIN	proxy_workdir/taskd-1.1.0/CMakeLists.txt	/^  set (DARWIN true)$/;"	v
DARWIN	proxy_workdir/taskd-1.1.0/cmake.h	/^#define DARWIN$/;"	d
DESCRIPTION	proxy_workdir/taskd-1.1.0/doc/man/taskd.1	/^.SH DESCRIPTION$/;"	s	title:taskd
DESCRIPTION	proxy_workdir/taskd-1.1.0/doc/man/taskd.1.in	/^.SH DESCRIPTION$/;"	s	title:taskd
DESCRIPTION	proxy_workdir/taskd-1.1.0/doc/man/taskdctl.1	/^.SH DESCRIPTION$/;"	s	title:taskdctl
DESCRIPTION	proxy_workdir/taskd-1.1.0/doc/man/taskdctl.1.in	/^.SH DESCRIPTION$/;"	s	title:taskdctl
DH_BITS	proxy_workdir/taskd-1.1.0/src/TLSServer.cpp	/^#define DH_BITS /;"	d	file:
DH_BITS	proxy_workdir/taskd-1.1.0/src/tls/TLSServer.cpp	/^#define DH_BITS /;"	d	file:
Daemon	proxy_workdir/taskd-1.1.0/src/daemon.cpp	/^Daemon::Daemon (Config& settings)$/;"	f	class:Daemon
Daemon	proxy_workdir/taskd-1.1.0/src/daemon.cpp	/^class Daemon : public Server$/;"	c	file:
Database	proxy_workdir/taskd-1.1.0/src/Database.cpp	/^Database::Database (Config* config)$/;"	f	class:Database
Database	proxy_workdir/taskd-1.1.0/src/Database.h	/^class Database$/;"	c
Date	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^Date::Date ()$/;"	f	class:Date
Date	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^Date::Date (const Date& rhs)$/;"	f	class:Date
Date	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^Date::Date (const int m,  const int d,  const int y,$/;"	f	class:Date
Date	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^Date::Date (const int m, const int d, const int y)$/;"	f	class:Date
Date	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^Date::Date (const std::string& input, const std::string& format \/* = "m\/d\/Y" *\/)$/;"	f	class:Date
Date	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^Date::Date (const time_t t)$/;"	f	class:Date
Date	proxy_workdir/taskd-1.1.0/src/Date.h	/^class Date$/;"	c
Description	proxy_workdir/taskd-1.1.0/scripts/systemd/taskd.service	/^Description=Secure server providing multi-user, multi-client access to task data$/;"	k	section:Unit
Directory	proxy_workdir/taskd-1.1.0/src/Directory.cpp	/^Directory::Directory ()$/;"	f	class:Directory
Directory	proxy_workdir/taskd-1.1.0/src/Directory.cpp	/^Directory::Directory (const Directory& other)$/;"	f	class:Directory
Directory	proxy_workdir/taskd-1.1.0/src/Directory.cpp	/^Directory::Directory (const File& other)$/;"	f	class:Directory
Directory	proxy_workdir/taskd-1.1.0/src/Directory.cpp	/^Directory::Directory (const Path& other)$/;"	f	class:Directory
Directory	proxy_workdir/taskd-1.1.0/src/Directory.cpp	/^Directory::Directory (const std::string& in)$/;"	f	class:Directory
Directory	proxy_workdir/taskd-1.1.0/src/Directory.h	/^class Directory : public File$/;"	c
Documentation	proxy_workdir/taskd-1.1.0/scripts/systemd/taskd.service	/^Documentation=http:\/\/taskwarrior.org\/docs\/$/;"	k	section:Unit
Duration	proxy_workdir/taskd-1.1.0/src/Duration.cpp	/^Duration::Duration ()$/;"	f	class:Duration
Duration	proxy_workdir/taskd-1.1.0/src/Duration.cpp	/^Duration::Duration (const Duration& other)$/;"	f	class:Duration
Duration	proxy_workdir/taskd-1.1.0/src/Duration.cpp	/^Duration::Duration (const std::string& input)$/;"	f	class:Duration
Duration	proxy_workdir/taskd-1.1.0/src/Duration.cpp	/^Duration::Duration (time_t input)$/;"	f	class:Duration
Duration	proxy_workdir/taskd-1.1.0/src/Duration.h	/^class Duration$/;"	c
ENVIRONMENT	proxy_workdir/taskd-1.1.0/doc/man/taskd.1	/^.SH ENVIRONMENT VARIABLES$/;"	s	title:taskd
ENVIRONMENT	proxy_workdir/taskd-1.1.0/doc/man/taskd.1.in	/^.SH ENVIRONMENT VARIABLES$/;"	s	title:taskd
ENVIRONMENT	proxy_workdir/taskd-1.1.0/doc/man/taskdctl.1	/^.SH ENVIRONMENT VARIABLES$/;"	s	title:taskdctl
ENVIRONMENT	proxy_workdir/taskd-1.1.0/doc/man/taskdctl.1.in	/^.SH ENVIRONMENT VARIABLES$/;"	s	title:taskdctl
ENVIRONMENT	proxy_workdir/taskd-1.1.0/doc/man/taskdrc.5	/^.SH ENVIRONMENT VARIABLES$/;"	s	title:taskd
ENVIRONMENT	proxy_workdir/taskd-1.1.0/doc/man/taskdrc.5.in	/^.SH ENVIRONMENT VARIABLES$/;"	s	title:taskd
EOF	install/pki/generate.ca	/^cat <<EOF >ca.info$/;"	h
EOF	install/pki/generate.client	/^cat <<EOF >client.info$/;"	h
EOF	install/pki/generate.crl	/^cat <<EOF >crl.info$/;"	h
EOF	install/pki/generate.server	/^cat <<EOF >server.info$/;"	h
EOF	proxy_workdir/taskd-1.1.0/pki/generate.ca	/^cat <<EOF >ca.info$/;"	h
EOF	proxy_workdir/taskd-1.1.0/pki/generate.client	/^cat <<EOF >client.info$/;"	h
EOF	proxy_workdir/taskd-1.1.0/pki/generate.crl	/^cat <<EOF >crl.info$/;"	h
EOF	proxy_workdir/taskd-1.1.0/pki/generate.server	/^cat <<EOF >server.info$/;"	h
EOF	proxy_workdir/taskd-1.1.0/src/taskdctl	/^      cat <<EOF$/;"	h
ExecStart	proxy_workdir/taskd-1.1.0/scripts/systemd/taskd.service	/^ExecStart=\/usr\/bin\/taskd server --data \/var\/lib\/taskd$/;"	k	section:Service
FEATURE_CLIENT_INTERFACE	proxy_workdir/taskd-1.1.0/cmake.h	/^#define FEATURE_CLIENT_INTERFACE$/;"	d
FEATURE_CLIENT_INTERFACE	proxy_workdir/taskd-1.1.0/cmake.h.in	/^#define FEATURE_CLIENT_INTERFACE$/;"	d	file:
FEATURE_COLOR	proxy_workdir/taskd-1.1.0/src/Color.h	/^#define FEATURE_COLOR /;"	d
FREEBSD	proxy_workdir/taskd-1.1.0/CMakeLists.txt	/^  set (FREEBSD true)$/;"	v
File	proxy_workdir/taskd-1.1.0/src/File.cpp	/^File::File ()$/;"	f	class:File
File	proxy_workdir/taskd-1.1.0/src/File.cpp	/^File::File (const File& other)$/;"	f	class:File
File	proxy_workdir/taskd-1.1.0/src/File.cpp	/^File::File (const Path& other)$/;"	f	class:File
File	proxy_workdir/taskd-1.1.0/src/File.cpp	/^File::File (const std::string& in)$/;"	f	class:File
File	proxy_workdir/taskd-1.1.0/src/File.h	/^class File : public Path$/;"	c
GLOB_BRACE	proxy_workdir/taskd-1.1.0/src/Path.cpp	/^#define GLOB_BRACE /;"	d	file:
GLOB_TILDE	proxy_workdir/taskd-1.1.0/src/Path.cpp	/^#define GLOB_TILDE /;"	d	file:
GNUHURD	proxy_workdir/taskd-1.1.0/CMakeLists.txt	/^  set (GNUHURD true)$/;"	v
Group	proxy_workdir/taskd-1.1.0/scripts/systemd/taskd.service	/^Group=taskd$/;"	k	section:Service
HAVE_CMAKE	proxy_workdir/taskd-1.1.0/CMakeLists.txt	/^set (HAVE_CMAKE true)$/;"	v
HAVE_CMAKE	proxy_workdir/taskd-1.1.0/cmake.h	/^#define HAVE_CMAKE$/;"	d
HAVE_COMMIT	proxy_workdir/taskd-1.1.0/CMakeLists.txt	/^  set (HAVE_COMMIT true)$/;"	v
HAVE_COMMIT	proxy_workdir/taskd-1.1.0/cmake.h	/^#define HAVE_COMMIT$/;"	d
HAVE_LIBGNUTLS	proxy_workdir/taskd-1.1.0/CMakeLists.txt	/^  set (HAVE_LIBGNUTLS true)$/;"	v
HAVE_LIBGNUTLS	proxy_workdir/taskd-1.1.0/cmake.h	/^#define HAVE_LIBGNUTLS$/;"	d
HAVE_ST_BIRTHTIME	proxy_workdir/taskd-1.1.0/cmake.h	/^#define HAVE_ST_BIRTHTIME$/;"	d
HAVE_TIMEGM	proxy_workdir/taskd-1.1.0/cmake.h	/^#define HAVE_TIMEGM$/;"	d
HAVE_TM_GMTOFF	proxy_workdir/taskd-1.1.0/cmake.h	/^#define HAVE_TM_GMTOFF$/;"	d
HAVE_UUID_UNPARSE_LOWER	proxy_workdir/taskd-1.1.0/cmake.h	/^#define HAVE_UUID_UNPARSE_LOWER$/;"	d
HighResTimer	proxy_workdir/taskd-1.1.0/src/Timer.cpp	/^HighResTimer::HighResTimer ()$/;"	f	class:HighResTimer
HighResTimer	proxy_workdir/taskd-1.1.0/src/Timer.h	/^class HighResTimer$/;"	c
INCLUDED_COLOR	proxy_workdir/taskd-1.1.0/src/Color.h	/^#define INCLUDED_COLOR$/;"	d
INCLUDED_CONFIG	proxy_workdir/taskd-1.1.0/src/ConfigFile.h	/^#define INCLUDED_CONFIG$/;"	d
INCLUDED_DATABASE	proxy_workdir/taskd-1.1.0/src/Database.h	/^#define INCLUDED_DATABASE$/;"	d
INCLUDED_DATE	proxy_workdir/taskd-1.1.0/src/Date.h	/^#define INCLUDED_DATE$/;"	d
INCLUDED_DIRECTORY	proxy_workdir/taskd-1.1.0/src/Directory.h	/^#define INCLUDED_DIRECTORY$/;"	d
INCLUDED_DURATION	proxy_workdir/taskd-1.1.0/src/Duration.h	/^#define INCLUDED_DURATION$/;"	d
INCLUDED_FILE	proxy_workdir/taskd-1.1.0/src/File.h	/^#define INCLUDED_FILE$/;"	d
INCLUDED_I18N	proxy_workdir/taskd-1.1.0/src/i18n.h	/^#define INCLUDED_I18N$/;"	d
INCLUDED_JSON	proxy_workdir/taskd-1.1.0/src/JSON.h	/^#define INCLUDED_JSON$/;"	d
INCLUDED_LOG	proxy_workdir/taskd-1.1.0/src/Log.h	/^#define INCLUDED_LOG$/;"	d
INCLUDED_MSG	proxy_workdir/taskd-1.1.0/src/Msg.h	/^#define INCLUDED_MSG$/;"	d
INCLUDED_NIBBLER	proxy_workdir/taskd-1.1.0/src/Nibbler.h	/^#define INCLUDED_NIBBLER$/;"	d
INCLUDED_PATH	proxy_workdir/taskd-1.1.0/src/Path.h	/^#define INCLUDED_PATH$/;"	d
INCLUDED_RX	proxy_workdir/taskd-1.1.0/src/RX.h	/^#define INCLUDED_RX$/;"	d
INCLUDED_SERVER	proxy_workdir/taskd-1.1.0/src/Server.h	/^#define INCLUDED_SERVER$/;"	d
INCLUDED_STRINGS	proxy_workdir/taskd-1.1.0/src/l10n/eng-USA.h	/^#define INCLUDED_STRINGS$/;"	d
INCLUDED_TASK	proxy_workdir/taskd-1.1.0/src/Task.h	/^#define INCLUDED_TASK$/;"	d
INCLUDED_TASKD	proxy_workdir/taskd-1.1.0/src/taskd.h	/^#define INCLUDED_TASKD$/;"	d
INCLUDED_TEXT	proxy_workdir/taskd-1.1.0/src/text.h	/^#define INCLUDED_TEXT$/;"	d
INCLUDED_TEXT	proxy_workdir/taskd-1.1.0/src/tls/text.h	/^#define INCLUDED_TEXT$/;"	d
INCLUDED_TIMER	proxy_workdir/taskd-1.1.0/src/Timer.h	/^#define INCLUDED_TIMER$/;"	d
INCLUDED_TLSCLIENT	proxy_workdir/taskd-1.1.0/src/TLSClient.h	/^#define INCLUDED_TLSCLIENT$/;"	d
INCLUDED_TLSCLIENT	proxy_workdir/taskd-1.1.0/src/tls/TLSClient.h	/^#define INCLUDED_TLSCLIENT$/;"	d
INCLUDED_TLSSERVER	proxy_workdir/taskd-1.1.0/src/TLSServer.h	/^#define INCLUDED_TLSSERVER$/;"	d
INCLUDED_TLSSERVER	proxy_workdir/taskd-1.1.0/src/tls/TLSServer.h	/^#define INCLUDED_TLSSERVER$/;"	d
INCLUDED_UTF8	proxy_workdir/taskd-1.1.0/src/utf8.h	/^#define INCLUDED_UTF8$/;"	d
INCLUDED_UTIL	proxy_workdir/taskd-1.1.0/src/util.h	/^#define INCLUDED_UTIL$/;"	d
Install	proxy_workdir/taskd-1.1.0/scripts/systemd/taskd.service	/^[Install]$/;"	s
KFREEBSD	proxy_workdir/taskd-1.1.0/CMakeLists.txt	/^  set (KFREEBSD true)$/;"	v
LANGUAGE_ENG_USA	proxy_workdir/taskd-1.1.0/CMakeLists.txt	/^set (LANGUAGE_ENG_USA 1)$/;"	v
LANGUAGE_ENG_USA	proxy_workdir/taskd-1.1.0/cmake.h	/^#define LANGUAGE_ENG_USA /;"	d
LANGUAGE_ENG_USA	proxy_workdir/taskd-1.1.0/cmake.h.in	/^#define LANGUAGE_ENG_USA /;"	d	file:
LINUX	proxy_workdir/taskd-1.1.0/CMakeLists.txt	/^  set (LINUX true)$/;"	v
Log	proxy_workdir/taskd-1.1.0/src/Log.cpp	/^Log::Log ()$/;"	f	class:Log
Log	proxy_workdir/taskd-1.1.0/src/Log.h	/^class Log$/;"	c
MAX_BUF	proxy_workdir/taskd-1.1.0/src/TLSClient.cpp	/^#define MAX_BUF /;"	d	file:
MAX_BUF	proxy_workdir/taskd-1.1.0/src/TLSServer.cpp	/^#define MAX_BUF /;"	d	file:
MAX_BUF	proxy_workdir/taskd-1.1.0/src/tls/TLSClient.cpp	/^#define MAX_BUF /;"	d	file:
MAX_BUF	proxy_workdir/taskd-1.1.0/src/tls/TLSServer.cpp	/^#define MAX_BUF /;"	d	file:
Msg	proxy_workdir/taskd-1.1.0/src/Msg.cpp	/^Msg::Msg ()$/;"	f	class:Msg
Msg	proxy_workdir/taskd-1.1.0/src/Msg.cpp	/^Msg::Msg (const Msg& other)$/;"	f	class:Msg
Msg	proxy_workdir/taskd-1.1.0/src/Msg.h	/^class Msg$/;"	c
NAME	Makefile	/^NAME = $(USER)\/taskd$/;"	m
NAME	proxy_workdir/taskd-1.1.0/doc/man/taskd.1	/^.SH NAME$/;"	s	title:taskd
NAME	proxy_workdir/taskd-1.1.0/doc/man/taskd.1.in	/^.SH NAME$/;"	s	title:taskd
NAME	proxy_workdir/taskd-1.1.0/doc/man/taskdctl.1	/^.SH NAME$/;"	s	title:taskdctl
NAME	proxy_workdir/taskd-1.1.0/doc/man/taskdctl.1.in	/^.SH NAME$/;"	s	title:taskdctl
NAME	proxy_workdir/taskd-1.1.0/doc/man/taskdrc.5	/^.SH NAME$/;"	s	title:taskd
NAME	proxy_workdir/taskd-1.1.0/doc/man/taskdrc.5.in	/^.SH NAME$/;"	s	title:taskd
NETBSD	proxy_workdir/taskd-1.1.0/CMakeLists.txt	/^  set (NETBSD true)$/;"	v
NIBBLER_FEATURE_DATE	proxy_workdir/taskd-1.1.0/src/Nibbler.h	/^#define NIBBLER_FEATURE_DATE$/;"	d
NIBBLER_FEATURE_REGEX	proxy_workdir/taskd-1.1.0/src/Nibbler.h	/^#define NIBBLER_FEATURE_REGEX$/;"	d
NUM_COLORS	proxy_workdir/taskd-1.1.0/src/Color.cpp	/^#define NUM_COLORS /;"	d	file:
NUM_DURATIONS	proxy_workdir/taskd-1.1.0/src/Duration.cpp	/^#define NUM_DURATIONS /;"	d	file:
NUM_ERRORS	proxy_workdir/taskd-1.1.0/src/api.cpp	/^#define NUM_ERRORS /;"	d	file:
NUM_RELATIVES	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^#define NUM_RELATIVES /;"	d	file:
Nibbler	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^Nibbler::Nibbler ()$/;"	f	class:Nibbler
Nibbler	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^Nibbler::Nibbler (const Nibbler& other)$/;"	f	class:Nibbler
Nibbler	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^Nibbler::Nibbler (const std::string& input)$/;"	f	class:Nibbler
Nibbler	proxy_workdir/taskd-1.1.0/src/Nibbler.h	/^class Nibbler$/;"	c
OPENBSD	proxy_workdir/taskd-1.1.0/CMakeLists.txt	/^  set (OPENBSD true)$/;"	v
PACKAGE	proxy_workdir/taskd-1.1.0/CMakeLists.txt	/^set (PACKAGE "${PROJECT_NAME}")$/;"	v
PACKAGE	proxy_workdir/taskd-1.1.0/cmake.h	/^#define PACKAGE /;"	d
PACKAGE	proxy_workdir/taskd-1.1.0/cmake.h.in	/^#define PACKAGE /;"	d	file:
PACKAGE_BUGREPORT	proxy_workdir/taskd-1.1.0/CMakeLists.txt	/^set (PACKAGE_BUGREPORT "support@taskwarrior.org")$/;"	v
PACKAGE_BUGREPORT	proxy_workdir/taskd-1.1.0/cmake.h	/^#define PACKAGE_BUGREPORT /;"	d
PACKAGE_BUGREPORT	proxy_workdir/taskd-1.1.0/cmake.h.in	/^#define PACKAGE_BUGREPORT /;"	d	file:
PACKAGE_LANGUAGE	proxy_workdir/taskd-1.1.0/CMakeLists.txt	/^  set (PACKAGE_LANGUAGE ${LANGUAGE})$/;"	v
PACKAGE_LANGUAGE	proxy_workdir/taskd-1.1.0/CMakeLists.txt	/^  set (PACKAGE_LANGUAGE 1)$/;"	v
PACKAGE_LANGUAGE	proxy_workdir/taskd-1.1.0/cmake.h	/^#define PACKAGE_LANGUAGE /;"	d
PACKAGE_LANGUAGE	proxy_workdir/taskd-1.1.0/cmake.h.in	/^#define PACKAGE_LANGUAGE /;"	d	file:
PACKAGE_NAME	proxy_workdir/taskd-1.1.0/CMakeLists.txt	/^set (PACKAGE_NAME "${PACKAGE}")$/;"	v
PACKAGE_NAME	proxy_workdir/taskd-1.1.0/cmake.h	/^#define PACKAGE_NAME /;"	d
PACKAGE_NAME	proxy_workdir/taskd-1.1.0/cmake.h.in	/^#define PACKAGE_NAME /;"	d	file:
PACKAGE_STRING	proxy_workdir/taskd-1.1.0/CMakeLists.txt	/^set (PACKAGE_STRING "${PACKAGE} ${VERSION}")$/;"	v
PACKAGE_STRING	proxy_workdir/taskd-1.1.0/cmake.h	/^#define PACKAGE_STRING /;"	d
PACKAGE_STRING	proxy_workdir/taskd-1.1.0/cmake.h.in	/^#define PACKAGE_STRING /;"	d	file:
PACKAGE_TARNAME	proxy_workdir/taskd-1.1.0/CMakeLists.txt	/^set (PACKAGE_TARNAME "${PACKAGE}")$/;"	v
PACKAGE_TARNAME	proxy_workdir/taskd-1.1.0/cmake.h	/^#define PACKAGE_TARNAME /;"	d
PACKAGE_TARNAME	proxy_workdir/taskd-1.1.0/cmake.h.in	/^#define PACKAGE_TARNAME /;"	d	file:
PACKAGE_VERSION	proxy_workdir/taskd-1.1.0/CMakeLists.txt	/^set (PACKAGE_VERSION "${VERSION}")$/;"	v
PACKAGE_VERSION	proxy_workdir/taskd-1.1.0/cmake.h	/^#define PACKAGE_VERSION /;"	d
PACKAGE_VERSION	proxy_workdir/taskd-1.1.0/cmake.h.in	/^#define PACKAGE_VERSION /;"	d	file:
PRODUCT_TASKSERVER	proxy_workdir/taskd-1.1.0/cmake.h	/^#define PRODUCT_TASKSERVER /;"	d
PRODUCT_TASKSERVER	proxy_workdir/taskd-1.1.0/cmake.h.in	/^#define PRODUCT_TASKSERVER /;"	d	file:
PROJECT_VERSION	proxy_workdir/taskd-1.1.0/CMakeLists.txt	/^set (PROJECT_VERSION "1.1.0")$/;"	v
Path	proxy_workdir/taskd-1.1.0/src/Path.cpp	/^Path::Path ()$/;"	f	class:Path
Path	proxy_workdir/taskd-1.1.0/src/Path.cpp	/^Path::Path (const Path& other)$/;"	f	class:Path
Path	proxy_workdir/taskd-1.1.0/src/Path.cpp	/^Path::Path (const std::string& in)$/;"	f	class:Path
Path	proxy_workdir/taskd-1.1.0/src/Path.h	/^class Path$/;"	c
REFERENCE	proxy_workdir/taskd-1.1.0/scripts/l10n	/^REFERENCE = 'eng-USA.h'$/;"	v
REPORTING	proxy_workdir/taskd-1.1.0/doc/man/taskd.1	/^.SH REPORTING BUGS$/;"	s	title:taskd
REPORTING	proxy_workdir/taskd-1.1.0/doc/man/taskd.1.in	/^.SH REPORTING BUGS$/;"	s	title:taskd
REPORTING	proxy_workdir/taskd-1.1.0/doc/man/taskdctl.1	/^.SH REPORTING BUGS$/;"	s	title:taskdctl
REPORTING	proxy_workdir/taskd-1.1.0/doc/man/taskdctl.1.in	/^.SH REPORTING BUGS$/;"	s	title:taskdctl
REPORTING	proxy_workdir/taskd-1.1.0/doc/man/taskdrc.5	/^.SH REPORTING BUGS$/;"	s	title:taskd
REPORTING	proxy_workdir/taskd-1.1.0/doc/man/taskdrc.5.in	/^.SH REPORTING BUGS$/;"	s	title:taskd
RX	proxy_workdir/taskd-1.1.0/src/RX.cpp	/^RX::RX ($/;"	f	class:RX
RX	proxy_workdir/taskd-1.1.0/src/RX.cpp	/^RX::RX ()$/;"	f	class:RX
RX	proxy_workdir/taskd-1.1.0/src/RX.cpp	/^RX::RX (const RX& other)$/;"	f	class:RX
RX	proxy_workdir/taskd-1.1.0/src/RX.h	/^class RX$/;"	c
Restart	proxy_workdir/taskd-1.1.0/scripts/systemd/taskd.service	/^Restart=on-abort$/;"	k	section:Service
SEE	proxy_workdir/taskd-1.1.0/doc/man/taskd.1	/^.SH SEE ALSO$/;"	s	title:taskd
SEE	proxy_workdir/taskd-1.1.0/doc/man/taskd.1.in	/^.SH SEE ALSO$/;"	s	title:taskd
SEE	proxy_workdir/taskd-1.1.0/doc/man/taskdctl.1	/^.SH SEE ALSO$/;"	s	title:taskdctl
SEE	proxy_workdir/taskd-1.1.0/doc/man/taskdctl.1.in	/^.SH SEE ALSO$/;"	s	title:taskdctl
SEE	proxy_workdir/taskd-1.1.0/doc/man/taskdrc.5	/^.SH SEE ALSO$/;"	s	title:taskd
SEE	proxy_workdir/taskd-1.1.0/doc/man/taskdrc.5.in	/^.SH SEE ALSO$/;"	s	title:taskd
SOLARIS	proxy_workdir/taskd-1.1.0/CMakeLists.txt	/^  set (SOLARIS true)$/;"	v
STRING_CLIENT_DISABLED	proxy_workdir/taskd-1.1.0/src/l10n/eng-USA.h	/^#define STRING_CLIENT_DISABLED /;"	d
STRING_CLIENT_USAGE	proxy_workdir/taskd-1.1.0/src/l10n/eng-USA.h	/^#define STRING_CLIENT_USAGE /;"	d
STRING_CONFIG_ADD	proxy_workdir/taskd-1.1.0/src/l10n/eng-USA.h	/^#define STRING_CONFIG_ADD /;"	d
STRING_CONFIG_MODIFIED	proxy_workdir/taskd-1.1.0/src/l10n/eng-USA.h	/^#define STRING_CONFIG_MODIFIED /;"	d
STRING_CONFIG_NOT_FOUND	proxy_workdir/taskd-1.1.0/src/l10n/eng-USA.h	/^#define STRING_CONFIG_NOT_FOUND /;"	d
STRING_CONFIG_NO_CHANGE	proxy_workdir/taskd-1.1.0/src/l10n/eng-USA.h	/^#define STRING_CONFIG_NO_CHANGE /;"	d
STRING_CONFIG_NO_PATH	proxy_workdir/taskd-1.1.0/src/l10n/eng-USA.h	/^#define STRING_CONFIG_NO_PATH /;"	d
STRING_CONFIG_OVERWRITE	proxy_workdir/taskd-1.1.0/src/l10n/eng-USA.h	/^#define STRING_CONFIG_OVERWRITE /;"	d
STRING_CONFIG_READ_ONLY	proxy_workdir/taskd-1.1.0/src/l10n/eng-USA.h	/^#define STRING_CONFIG_READ_ONLY /;"	d
STRING_CONFIG_REMOVE	proxy_workdir/taskd-1.1.0/src/l10n/eng-USA.h	/^#define STRING_CONFIG_REMOVE /;"	d
STRING_CONFIG_SOURCE	proxy_workdir/taskd-1.1.0/src/l10n/eng-USA.h	/^#define STRING_CONFIG_SOURCE /;"	d
STRING_ERROR_UNKNOWN	proxy_workdir/taskd-1.1.0/src/l10n/eng-USA.h	/^#define STRING_ERROR_UNKNOWN /;"	d
STRING_INIT_COULD_NOT_CREATE	proxy_workdir/taskd-1.1.0/src/l10n/eng-USA.h	/^#define STRING_INIT_COULD_NOT_CREATE /;"	d
STRING_INIT_CREATED	proxy_workdir/taskd-1.1.0/src/l10n/eng-USA.h	/^#define STRING_INIT_CREATED /;"	d
STRING_INIT_DATA_REQUIRED	proxy_workdir/taskd-1.1.0/src/l10n/eng-USA.h	/^#define STRING_INIT_DATA_REQUIRED /;"	d
STRING_INIT_PATH_MISSING	proxy_workdir/taskd-1.1.0/src/l10n/eng-USA.h	/^#define STRING_INIT_PATH_MISSING /;"	d
STRING_INIT_PATH_NOT_DIR	proxy_workdir/taskd-1.1.0/src/l10n/eng-USA.h	/^#define STRING_INIT_PATH_NOT_DIR /;"	d
STRING_INIT_PATH_NOT_EXE	proxy_workdir/taskd-1.1.0/src/l10n/eng-USA.h	/^#define STRING_INIT_PATH_NOT_EXE /;"	d
STRING_INIT_PATH_NOT_READ	proxy_workdir/taskd-1.1.0/src/l10n/eng-USA.h	/^#define STRING_INIT_PATH_NOT_READ /;"	d
STRING_INIT_PATH_NOT_WRITE	proxy_workdir/taskd-1.1.0/src/l10n/eng-USA.h	/^#define STRING_INIT_PATH_NOT_WRITE /;"	d
STRING_INIT_SERVER	proxy_workdir/taskd-1.1.0/src/l10n/eng-USA.h	/^#define STRING_INIT_SERVER /;"	d
STRING_JSON_SYNTAX_OK	proxy_workdir/taskd-1.1.0/src/l10n/eng-USA.h	/^#define STRING_JSON_SYNTAX_OK /;"	d
STRING_JSON_VALIDATE	proxy_workdir/taskd-1.1.0/src/l10n/eng-USA.h	/^#define STRING_JSON_VALIDATE /;"	d
STRING_LOCALIZATION_AUTHOR	proxy_workdir/taskd-1.1.0/src/l10n/eng-USA.h	/^#define STRING_LOCALIZATION_AUTHOR /;"	d
STRING_LOCALIZATION_DESC	proxy_workdir/taskd-1.1.0/src/l10n/eng-USA.h	/^#define STRING_LOCALIZATION_DESC /;"	d
STRING_RECORD_EMPTY	proxy_workdir/taskd-1.1.0/src/l10n/eng-USA.h	/^#define STRING_RECORD_EMPTY /;"	d
STRING_RECORD_JUNK_AT_EOL	proxy_workdir/taskd-1.1.0/src/l10n/eng-USA.h	/^#define STRING_RECORD_JUNK_AT_EOL /;"	d
STRING_RECORD_LINE	proxy_workdir/taskd-1.1.0/src/l10n/eng-USA.h	/^#define STRING_RECORD_LINE /;"	d
STRING_RECORD_NOT_FF4	proxy_workdir/taskd-1.1.0/src/l10n/eng-USA.h	/^#define STRING_RECORD_NOT_FF4 /;"	d
STRING_SERVER_DOWN	proxy_workdir/taskd-1.1.0/src/l10n/eng-USA.h	/^#define STRING_SERVER_DOWN /;"	d
STRING_TASKD_BAD_COMMAND	proxy_workdir/taskd-1.1.0/src/l10n/eng-USA.h	/^#define STRING_TASKD_BAD_COMMAND /;"	d
STRING_TASKD_DATA	proxy_workdir/taskd-1.1.0/src/l10n/eng-USA.h	/^#define STRING_TASKD_DATA /;"	d
STRING_TASK_NO_DESC	proxy_workdir/taskd-1.1.0/src/l10n/eng-USA.h	/^#define STRING_TASK_NO_DESC /;"	d
STRING_TASK_NO_ENTRY	proxy_workdir/taskd-1.1.0/src/l10n/eng-USA.h	/^#define STRING_TASK_NO_ENTRY /;"	d
STRING_TASK_NO_FF1	proxy_workdir/taskd-1.1.0/src/l10n/eng-USA.h	/^#define STRING_TASK_NO_FF1 /;"	d
STRING_TASK_NO_FF2	proxy_workdir/taskd-1.1.0/src/l10n/eng-USA.h	/^#define STRING_TASK_NO_FF2 /;"	d
STRING_TASK_PARSE_ANNO_BRACK	proxy_workdir/taskd-1.1.0/src/l10n/eng-USA.h	/^#define STRING_TASK_PARSE_ANNO_BRACK /;"	d
STRING_TASK_PARSE_ATT_BRACK	proxy_workdir/taskd-1.1.0/src/l10n/eng-USA.h	/^#define STRING_TASK_PARSE_ATT_BRACK /;"	d
STRING_TASK_PARSE_TAG_BRACK	proxy_workdir/taskd-1.1.0/src/l10n/eng-USA.h	/^#define STRING_TASK_PARSE_TAG_BRACK /;"	d
STRING_TASK_PARSE_TOO_SHORT	proxy_workdir/taskd-1.1.0/src/l10n/eng-USA.h	/^#define STRING_TASK_PARSE_TOO_SHORT /;"	d
STRING_TASK_PARSE_UNREC_FF	proxy_workdir/taskd-1.1.0/src/l10n/eng-USA.h	/^#define STRING_TASK_PARSE_UNREC_FF /;"	d
STRING_TASK_VALID_BLANK	proxy_workdir/taskd-1.1.0/src/l10n/eng-USA.h	/^#define STRING_TASK_VALID_BLANK /;"	d
STRING_TASK_VALID_DESC	proxy_workdir/taskd-1.1.0/src/l10n/eng-USA.h	/^#define STRING_TASK_VALID_DESC /;"	d
STRING_TASK_VALID_RECUR	proxy_workdir/taskd-1.1.0/src/l10n/eng-USA.h	/^#define STRING_TASK_VALID_RECUR /;"	d
STRING_TASK_VALID_REC_DUE	proxy_workdir/taskd-1.1.0/src/l10n/eng-USA.h	/^#define STRING_TASK_VALID_REC_DUE /;"	d
SYNOPSIS	proxy_workdir/taskd-1.1.0/doc/man/taskd.1	/^.SH SYNOPSIS$/;"	s	title:taskd
SYNOPSIS	proxy_workdir/taskd-1.1.0/doc/man/taskd.1.in	/^.SH SYNOPSIS$/;"	s	title:taskd
SYNOPSIS	proxy_workdir/taskd-1.1.0/doc/man/taskdctl.1	/^.SH SYNOPSIS$/;"	s	title:taskdctl
SYNOPSIS	proxy_workdir/taskd-1.1.0/doc/man/taskdctl.1.in	/^.SH SYNOPSIS$/;"	s	title:taskdctl
Server	proxy_workdir/taskd-1.1.0/src/Server.cpp	/^Server::Server ()$/;"	f	class:Server
Server	proxy_workdir/taskd-1.1.0/src/Server.h	/^class Server$/;"	c
Service	proxy_workdir/taskd-1.1.0/scripts/systemd/taskd.service	/^[Service]$/;"	s
TASKD_BINDIR	proxy_workdir/taskd-1.1.0/CMakeLists.txt	/^SET (TASKD_BINDIR  bin             CACHE STRING "Installation directory for the program")$/;"	v
TASKD_DOCDIR	proxy_workdir/taskd-1.1.0/CMakeLists.txt	/^SET (TASKD_DOCDIR  share\/doc\/taskd CACHE STRING "Installation directory for doc files")$/;"	v
TASKD_EXTDIR	proxy_workdir/taskd-1.1.0/CMakeLists.txt	/^SET (TASKD_EXTDIR  libexec\/taskd   CACHE STRING "Installation directory for the extensions")$/;"	v
TASKD_EXTDIR	proxy_workdir/taskd-1.1.0/cmake.h	/^#define TASKD_EXTDIR /;"	d
TASKD_EXTDIR	proxy_workdir/taskd-1.1.0/cmake.h.in	/^#define TASKD_EXTDIR /;"	d	file:
TASKD_INCLUDE_DIRS	proxy_workdir/taskd-1.1.0/CMakeLists.txt	/^    set (TASKD_INCLUDE_DIRS ${TASKD_INCLUDE_DIRS} ${UUID_INCLUDE_DIR})$/;"	v
TASKD_INCLUDE_DIRS	proxy_workdir/taskd-1.1.0/CMakeLists.txt	/^  set (TASKD_INCLUDE_DIRS ${TASKD_INCLUDE_DIRS} ${GNUTLS_INCLUDE_DIR})$/;"	v
TASKD_LIBRARIES	proxy_workdir/taskd-1.1.0/CMakeLists.txt	/^    set (TASKD_LIBRARIES    ${TASKD_LIBRARIES}    ${UUID_LIBRARY})$/;"	v
TASKD_LIBRARIES	proxy_workdir/taskd-1.1.0/CMakeLists.txt	/^  set (TASKD_LIBRARIES    ${TASKD_LIBRARIES}    ${GNUTLS_LIBRARIES})$/;"	v
TASKD_MAN1DIR	proxy_workdir/taskd-1.1.0/CMakeLists.txt	/^SET (TASKD_MAN1DIR man\/man1  CACHE STRING "Installation directory for man pages, section 1")$/;"	v
TASKD_MAN1DIR	proxy_workdir/taskd-1.1.0/CMakeLists.txt	/^SET (TASKD_MAN1DIR share\/man\/man1  CACHE STRING "Installation directory for man pages, section/;"	v
TASKD_MAN5DIR	proxy_workdir/taskd-1.1.0/CMakeLists.txt	/^SET (TASKD_MAN5DIR man\/man5  CACHE STRING "Installation directory for man pages, section 5")$/;"	v
TASKD_MAN5DIR	proxy_workdir/taskd-1.1.0/CMakeLists.txt	/^SET (TASKD_MAN5DIR share\/man\/man5  CACHE STRING "Installation directory for man pages, section/;"	v
TLSClient	proxy_workdir/taskd-1.1.0/src/TLSClient.cpp	/^TLSClient::TLSClient ()$/;"	f	class:TLSClient
TLSClient	proxy_workdir/taskd-1.1.0/src/TLSClient.h	/^class TLSClient$/;"	c
TLSClient	proxy_workdir/taskd-1.1.0/src/tls/TLSClient.cpp	/^TLSClient::TLSClient ()$/;"	f	class:TLSClient
TLSClient	proxy_workdir/taskd-1.1.0/src/tls/TLSClient.h	/^class TLSClient$/;"	c
TLSServer	proxy_workdir/taskd-1.1.0/src/TLSServer.cpp	/^TLSServer::TLSServer ()$/;"	f	class:TLSServer
TLSServer	proxy_workdir/taskd-1.1.0/src/TLSServer.h	/^class TLSServer$/;"	c
TLSServer	proxy_workdir/taskd-1.1.0/src/tls/TLSServer.cpp	/^TLSServer::TLSServer ()$/;"	f	class:TLSServer
TLSServer	proxy_workdir/taskd-1.1.0/src/tls/TLSServer.h	/^class TLSServer$/;"	c
TLSTransaction	proxy_workdir/taskd-1.1.0/src/TLSServer.cpp	/^TLSTransaction::TLSTransaction ()$/;"	f	class:TLSTransaction
TLSTransaction	proxy_workdir/taskd-1.1.0/src/TLSServer.h	/^class TLSTransaction$/;"	c
TLSTransaction	proxy_workdir/taskd-1.1.0/src/tls/TLSServer.cpp	/^TLSTransaction::TLSTransaction ()$/;"	f	class:TLSTransaction
TLSTransaction	proxy_workdir/taskd-1.1.0/src/tls/TLSServer.h	/^class TLSTransaction$/;"	c
Task	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^Task::Task ()$/;"	f	class:Task
Task	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^Task::Task (const Task& other)$/;"	f	class:Task
Task	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^Task::Task (const std::string& input)$/;"	f	class:Task
Task	proxy_workdir/taskd-1.1.0/src/Task.h	/^class Task : public std::map <std::string, std::string>$/;"	c
Timer	proxy_workdir/taskd-1.1.0/src/Timer.cpp	/^Timer::Timer ()$/;"	f	class:Timer
Timer	proxy_workdir/taskd-1.1.0/src/Timer.cpp	/^Timer::Timer (const std::string& description)$/;"	f	class:Timer
Timer	proxy_workdir/taskd-1.1.0/src/Timer.h	/^class Timer$/;"	c
Type	proxy_workdir/taskd-1.1.0/scripts/systemd/taskd.service	/^Type=simple$/;"	k	section:Service
UNKNOWN	proxy_workdir/taskd-1.1.0/CMakeLists.txt	/^  set (UNKNOWN true)$/;"	v
USE_GNUTLS	proxy_workdir/taskd-1.1.0/CMakeLists.txt	/^OPTION(USE_GNUTLS "Build gnutls support." ON)$/;"	D
Unit	proxy_workdir/taskd-1.1.0/scripts/systemd/taskd.service	/^[Unit]$/;"	s
User	proxy_workdir/taskd-1.1.0/scripts/systemd/taskd.service	/^User=taskd$/;"	k	section:Service
VERSION	Makefile	/^VERSION = 0.1.0$/;"	m
VERSION	proxy_workdir/taskd-1.1.0/CMakeLists.txt	/^set (VERSION "${PROJECT_VERSION}")$/;"	v
VERSION	proxy_workdir/taskd-1.1.0/cmake.h	/^#define VERSION /;"	d
VERSION	proxy_workdir/taskd-1.1.0/cmake.h.in	/^#define VERSION /;"	d	file:
WantedBy	proxy_workdir/taskd-1.1.0/scripts/systemd/taskd.service	/^WantedBy=multi-user.target$/;"	k	section:Install
XDIGIT	proxy_workdir/taskd-1.1.0/src/utf8.cpp	/^#define XDIGIT(/;"	d	file:
_COLOR_256	proxy_workdir/taskd-1.1.0/src/Color.h	/^#define _COLOR_256 /;"	d
_COLOR_BG	proxy_workdir/taskd-1.1.0/src/Color.h	/^#define _COLOR_BG /;"	d
_COLOR_BOLD	proxy_workdir/taskd-1.1.0/src/Color.h	/^#define _COLOR_BOLD /;"	d
_COLOR_BRIGHT	proxy_workdir/taskd-1.1.0/src/Color.h	/^#define _COLOR_BRIGHT /;"	d
_COLOR_FG	proxy_workdir/taskd-1.1.0/src/Color.h	/^#define _COLOR_FG /;"	d
_COLOR_HASBG	proxy_workdir/taskd-1.1.0/src/Color.h	/^#define _COLOR_HASBG /;"	d
_COLOR_HASFG	proxy_workdir/taskd-1.1.0/src/Color.h	/^#define _COLOR_HASFG /;"	d
_COLOR_INVERSE	proxy_workdir/taskd-1.1.0/src/Color.h	/^#define _COLOR_INVERSE /;"	d
_COLOR_UNDERLINE	proxy_workdir/taskd-1.1.0/src/Color.h	/^#define _COLOR_UNDERLINE /;"	d
_CXX11_FLAGS	proxy_workdir/taskd-1.1.0/CMakeLists.txt	/^  set (_CXX11_FLAGS "${_CXX11_FLAGS} -stdlib=libc++")$/;"	v
_CXX11_FLAGS	proxy_workdir/taskd-1.1.0/CMakeLists.txt	/^  set (_CXX11_FLAGS "-std=c++0x")$/;"	v
_CXX11_FLAGS	proxy_workdir/taskd-1.1.0/CMakeLists.txt	/^  set (_CXX11_FLAGS "-std=c++11")$/;"	v
_CXX11_FLAGS	proxy_workdir/taskd-1.1.0/CMakeLists.txt	/^  set (_CXX11_FLAGS "-std=gnu++0x")$/;"	v
__anon8b6a76ba0108	proxy_workdir/taskd-1.1.0/src/api.cpp	/^{$/;"	s	file:
__anonfc85177f0108	proxy_workdir/taskd-1.1.0/src/Color.cpp	/^{$/;"	s	file:
_address	proxy_workdir/taskd-1.1.0/src/TLSServer.h	/^  std::string                 _address;$/;"	m	class:TLSTransaction	typeref:typename:std::string
_address	proxy_workdir/taskd-1.1.0/src/tls/TLSServer.h	/^  std::string                 _address;$/;"	m	class:TLSTransaction	typeref:typename:std::string
_busy	proxy_workdir/taskd-1.1.0/src/daemon.cpp	/^  double _busy;$/;"	m	class:Daemon	typeref:typename:double	file:
_bytes_in	proxy_workdir/taskd-1.1.0/src/daemon.cpp	/^  long _bytes_in;$/;"	m	class:Daemon	typeref:typename:long	file:
_bytes_out	proxy_workdir/taskd-1.1.0/src/daemon.cpp	/^  long _bytes_out;$/;"	m	class:Daemon	typeref:typename:long	file:
_ca	proxy_workdir/taskd-1.1.0/src/TLSClient.h	/^  std::string                      _ca;$/;"	m	class:TLSClient	typeref:typename:std::string
_ca	proxy_workdir/taskd-1.1.0/src/TLSServer.h	/^  std::string                      _ca;$/;"	m	class:TLSServer	typeref:typename:std::string
_ca	proxy_workdir/taskd-1.1.0/src/tls/TLSClient.h	/^  std::string                      _ca;$/;"	m	class:TLSClient	typeref:typename:std::string
_ca	proxy_workdir/taskd-1.1.0/src/tls/TLSServer.h	/^  std::string                      _ca;$/;"	m	class:TLSServer	typeref:typename:std::string
_ca_file	proxy_workdir/taskd-1.1.0/src/Server.h	/^  std::string _ca_file;$/;"	m	class:Server	typeref:typename:std::string
_case_sensitive	proxy_workdir/taskd-1.1.0/src/RX.h	/^  bool _case_sensitive;$/;"	m	class:RX	typeref:typename:bool
_cert	proxy_workdir/taskd-1.1.0/src/TLSClient.h	/^  std::string                      _cert;$/;"	m	class:TLSClient	typeref:typename:std::string
_cert	proxy_workdir/taskd-1.1.0/src/TLSServer.h	/^  std::string                      _cert;$/;"	m	class:TLSServer	typeref:typename:std::string
_cert	proxy_workdir/taskd-1.1.0/src/tls/TLSClient.h	/^  std::string                      _cert;$/;"	m	class:TLSClient	typeref:typename:std::string
_cert	proxy_workdir/taskd-1.1.0/src/tls/TLSServer.h	/^  std::string                      _cert;$/;"	m	class:TLSServer	typeref:typename:std::string
_cert_file	proxy_workdir/taskd-1.1.0/src/Server.h	/^  std::string _cert_file;$/;"	m	class:Server	typeref:typename:std::string
_ciphers	proxy_workdir/taskd-1.1.0/src/TLSClient.h	/^  std::string                      _ciphers;$/;"	m	class:TLSClient	typeref:typename:std::string
_ciphers	proxy_workdir/taskd-1.1.0/src/TLSServer.h	/^  std::string                      _ciphers;$/;"	m	class:TLSServer	typeref:typename:std::string
_ciphers	proxy_workdir/taskd-1.1.0/src/tls/TLSClient.h	/^  std::string                      _ciphers;$/;"	m	class:TLSClient	typeref:typename:std::string
_ciphers	proxy_workdir/taskd-1.1.0/src/tls/TLSServer.h	/^  std::string                      _ciphers;$/;"	m	class:TLSServer	typeref:typename:std::string
_client_address	proxy_workdir/taskd-1.1.0/src/Server.h	/^  std::string _client_address;$/;"	m	class:Server	typeref:typename:std::string
_client_port	proxy_workdir/taskd-1.1.0/src/Server.h	/^  int _client_port;$/;"	m	class:Server	typeref:typename:int
_compiled	proxy_workdir/taskd-1.1.0/src/RX.h	/^  bool _compiled;$/;"	m	class:RX	typeref:typename:bool
_config	proxy_workdir/taskd-1.1.0/src/Database.h	/^  Config* _config;$/;"	m	class:Database	typeref:typename:Config *
_config	proxy_workdir/taskd-1.1.0/src/Server.h	/^  Config* _config;$/;"	m	class:Server	typeref:typename:Config *
_config	proxy_workdir/taskd-1.1.0/src/daemon.cpp	/^  Config& _config;$/;"	m	class:Daemon	typeref:typename:Config &	file:
_credentials	proxy_workdir/taskd-1.1.0/src/TLSClient.h	/^  gnutls_certificate_credentials_t _credentials;$/;"	m	class:TLSClient	typeref:typename:gnutls_certificate_credentials_t
_credentials	proxy_workdir/taskd-1.1.0/src/TLSServer.h	/^  gnutls_certificate_credentials_t _credentials;$/;"	m	class:TLSServer	typeref:typename:gnutls_certificate_credentials_t
_credentials	proxy_workdir/taskd-1.1.0/src/tls/TLSClient.h	/^  gnutls_certificate_credentials_t _credentials;$/;"	m	class:TLSClient	typeref:typename:gnutls_certificate_credentials_t
_credentials	proxy_workdir/taskd-1.1.0/src/tls/TLSServer.h	/^  gnutls_certificate_credentials_t _credentials;$/;"	m	class:TLSServer	typeref:typename:gnutls_certificate_credentials_t
_crl	proxy_workdir/taskd-1.1.0/src/TLSServer.h	/^  std::string                      _crl;$/;"	m	class:TLSServer	typeref:typename:std::string
_crl	proxy_workdir/taskd-1.1.0/src/tls/TLSServer.h	/^  std::string                      _crl;$/;"	m	class:TLSServer	typeref:typename:std::string
_crl_file	proxy_workdir/taskd-1.1.0/src/Server.h	/^  std::string _crl_file;$/;"	m	class:Server	typeref:typename:std::string
_cursor	proxy_workdir/taskd-1.1.0/src/Nibbler.h	/^  std::string::size_type _cursor;$/;"	m	class:Nibbler	typeref:typename:std::string::size_type
_daemon	proxy_workdir/taskd-1.1.0/src/Server.h	/^  bool _daemon;$/;"	m	class:Server	typeref:typename:bool
_data	proxy_workdir/taskd-1.1.0/src/JSON.h	/^    std::map <std::string, value*> _data;$/;"	m	class:json::object	typeref:typename:std::map<std::string,value * >
_data	proxy_workdir/taskd-1.1.0/src/JSON.h	/^    std::string _data;$/;"	m	class:json::string	typeref:typename:std::string
_data	proxy_workdir/taskd-1.1.0/src/JSON.h	/^    std::vector <value*> _data;$/;"	m	class:json::array	typeref:typename:std::vector<value * >
_data	proxy_workdir/taskd-1.1.0/src/Path.h	/^  std::string _data;$/;"	m	class:Path	typeref:typename:std::string
_db	proxy_workdir/taskd-1.1.0/src/daemon.cpp	/^  Database _db;$/;"	m	class:Daemon	typeref:typename:Database	file:
_debug	proxy_workdir/taskd-1.1.0/src/TLSClient.h	/^  bool                             _debug;$/;"	m	class:TLSClient	typeref:typename:bool
_debug	proxy_workdir/taskd-1.1.0/src/TLSServer.h	/^  bool                             _debug;$/;"	m	class:TLSServer	typeref:typename:bool
_debug	proxy_workdir/taskd-1.1.0/src/TLSServer.h	/^  bool                        _debug;$/;"	m	class:TLSTransaction	typeref:typename:bool
_debug	proxy_workdir/taskd-1.1.0/src/tls/TLSClient.h	/^  bool                             _debug;$/;"	m	class:TLSClient	typeref:typename:bool
_debug	proxy_workdir/taskd-1.1.0/src/tls/TLSServer.h	/^  bool                             _debug;$/;"	m	class:TLSServer	typeref:typename:bool
_debug	proxy_workdir/taskd-1.1.0/src/tls/TLSServer.h	/^  bool                        _debug;$/;"	m	class:TLSTransaction	typeref:typename:bool
_description	proxy_workdir/taskd-1.1.0/src/Timer.h	/^  std::string    _description;$/;"	m	class:Timer	typeref:typename:std::string
_dirty	proxy_workdir/taskd-1.1.0/src/ConfigFile.h	/^  bool _dirty;$/;"	m	class:Config	typeref:typename:bool
_dvalue	proxy_workdir/taskd-1.1.0/src/JSON.h	/^    double _dvalue;$/;"	m	class:json::number	typeref:typename:double
_error_count	proxy_workdir/taskd-1.1.0/src/daemon.cpp	/^  long _error_count;$/;"	m	class:Daemon	typeref:typename:long	file:
_family	proxy_workdir/taskd-1.1.0/src/Server.h	/^  std::string _family;$/;"	m	class:Server	typeref:typename:std::string
_fh	proxy_workdir/taskd-1.1.0/src/File.h	/^  FILE* _fh;$/;"	m	class:File	typeref:typename:FILE *
_fh	proxy_workdir/taskd-1.1.0/src/Log.h	/^  FILE*       _fh;$/;"	m	class:Log	typeref:typename:FILE *
_filename	proxy_workdir/taskd-1.1.0/src/Log.h	/^  std::string _filename;$/;"	m	class:Log	typeref:typename:std::string
_h	proxy_workdir/taskd-1.1.0/src/File.h	/^  int   _h;$/;"	m	class:File	typeref:typename:int
_header	proxy_workdir/taskd-1.1.0/src/Msg.h	/^  std::map <std::string, std::string> _header;$/;"	m	class:Msg	typeref:typename:std::map<std::string,std::string>
_host	proxy_workdir/taskd-1.1.0/src/Server.h	/^  std::string _host;$/;"	m	class:Server	typeref:typename:std::string
_host	proxy_workdir/taskd-1.1.0/src/TLSClient.h	/^  std::string                      _host;$/;"	m	class:TLSClient	typeref:typename:std::string
_host	proxy_workdir/taskd-1.1.0/src/tls/TLSClient.h	/^  std::string                      _host;$/;"	m	class:TLSClient	typeref:typename:std::string
_input	proxy_workdir/taskd-1.1.0/src/Nibbler.h	/^  std::string _input;$/;"	m	class:Nibbler	typeref:typename:std::string
_key	proxy_workdir/taskd-1.1.0/src/TLSClient.h	/^  std::string                      _key;$/;"	m	class:TLSClient	typeref:typename:std::string
_key	proxy_workdir/taskd-1.1.0/src/TLSServer.h	/^  std::string                      _key;$/;"	m	class:TLSServer	typeref:typename:std::string
_key	proxy_workdir/taskd-1.1.0/src/tls/TLSClient.h	/^  std::string                      _key;$/;"	m	class:TLSClient	typeref:typename:std::string
_key	proxy_workdir/taskd-1.1.0/src/tls/TLSServer.h	/^  std::string                      _key;$/;"	m	class:TLSServer	typeref:typename:std::string
_key_file	proxy_workdir/taskd-1.1.0/src/Server.h	/^  std::string _key_file;$/;"	m	class:Server	typeref:typename:std::string
_length	proxy_workdir/taskd-1.1.0/src/Nibbler.h	/^  std::string::size_type _length;$/;"	m	class:Nibbler	typeref:typename:std::string::size_type
_limit	proxy_workdir/taskd-1.1.0/src/Server.h	/^  int _limit;$/;"	m	class:Server	typeref:typename:int
_limit	proxy_workdir/taskd-1.1.0/src/TLSClient.h	/^  int                              _limit;$/;"	m	class:TLSClient	typeref:typename:int
_limit	proxy_workdir/taskd-1.1.0/src/TLSServer.h	/^  int                         _limit;$/;"	m	class:TLSTransaction	typeref:typename:int
_limit	proxy_workdir/taskd-1.1.0/src/tls/TLSClient.h	/^  int                              _limit;$/;"	m	class:TLSClient	typeref:typename:int
_limit	proxy_workdir/taskd-1.1.0/src/tls/TLSServer.h	/^  int                         _limit;$/;"	m	class:TLSTransaction	typeref:typename:int
_locked	proxy_workdir/taskd-1.1.0/src/File.h	/^  bool  _locked;$/;"	m	class:File	typeref:typename:bool
_log	proxy_workdir/taskd-1.1.0/src/Database.h	/^  Log* _log;$/;"	m	class:Database	typeref:typename:Log *
_log	proxy_workdir/taskd-1.1.0/src/Server.h	/^  Log* _log;$/;"	m	class:Server	typeref:typename:Log *
_log_clients	proxy_workdir/taskd-1.1.0/src/Server.h	/^  bool _log_clients;$/;"	m	class:Server	typeref:typename:bool
_lvalue	proxy_workdir/taskd-1.1.0/src/JSON.h	/^    literal_value _lvalue;$/;"	m	class:json::literal	typeref:typename:literal_value
_max_time	proxy_workdir/taskd-1.1.0/src/daemon.cpp	/^  double _max_time;$/;"	m	class:Daemon	typeref:typename:double	file:
_negative	proxy_workdir/taskd-1.1.0/src/Duration.h	/^  bool _negative;$/;"	m	class:Duration	typeref:typename:bool
_now	proxy_workdir/taskd-1.1.0/src/Log.h	/^  char        _now[20];$/;"	m	class:Log	typeref:typename:char[20]
_original	proxy_workdir/taskd-1.1.0/src/Path.h	/^  std::string _original;$/;"	m	class:Path	typeref:typename:std::string
_original_file	proxy_workdir/taskd-1.1.0/src/ConfigFile.h	/^  File _original_file;$/;"	m	class:Config	typeref:typename:File
_overrides	proxy_workdir/taskd-1.1.0/src/daemon.cpp	/^static Config _overrides;$/;"	v	typeref:typename:Config	file:
_params	proxy_workdir/taskd-1.1.0/src/TLSServer.h	/^  gnutls_dh_params_t               _params;$/;"	m	class:TLSServer	typeref:typename:gnutls_dh_params_t
_params	proxy_workdir/taskd-1.1.0/src/tls/TLSServer.h	/^  gnutls_dh_params_t               _params;$/;"	m	class:TLSServer	typeref:typename:gnutls_dh_params_t
_pattern	proxy_workdir/taskd-1.1.0/src/RX.h	/^  std::string _pattern;$/;"	m	class:RX	typeref:typename:std::string
_payload	proxy_workdir/taskd-1.1.0/src/Msg.h	/^  std::string _payload;$/;"	m	class:Msg	typeref:typename:std::string
_pid_file	proxy_workdir/taskd-1.1.0/src/Server.h	/^  std::string _pid_file;$/;"	m	class:Server	typeref:typename:std::string
_pool_size	proxy_workdir/taskd-1.1.0/src/Server.h	/^  int _pool_size;$/;"	m	class:Server	typeref:typename:int
_port	proxy_workdir/taskd-1.1.0/src/Server.h	/^  std::string _port;$/;"	m	class:Server	typeref:typename:std::string
_port	proxy_workdir/taskd-1.1.0/src/TLSClient.h	/^  std::string                      _port;$/;"	m	class:TLSClient	typeref:typename:std::string
_port	proxy_workdir/taskd-1.1.0/src/TLSServer.h	/^  int                         _port;$/;"	m	class:TLSTransaction	typeref:typename:int
_port	proxy_workdir/taskd-1.1.0/src/tls/TLSClient.h	/^  std::string                      _port;$/;"	m	class:TLSClient	typeref:typename:std::string
_port	proxy_workdir/taskd-1.1.0/src/tls/TLSServer.h	/^  int                         _port;$/;"	m	class:TLSTransaction	typeref:typename:int
_prior	proxy_workdir/taskd-1.1.0/src/Log.h	/^  std::string _prior;$/;"	m	class:Log	typeref:typename:std::string
_priorities	proxy_workdir/taskd-1.1.0/src/TLSServer.h	/^  gnutls_priority_t                _priorities;$/;"	m	class:TLSServer	typeref:typename:gnutls_priority_t
_priorities	proxy_workdir/taskd-1.1.0/src/tls/TLSServer.h	/^  gnutls_priority_t                _priorities;$/;"	m	class:TLSServer	typeref:typename:gnutls_priority_t
_queue	proxy_workdir/taskd-1.1.0/src/TLSServer.h	/^  int                              _queue;$/;"	m	class:TLSServer	typeref:typename:int
_queue	proxy_workdir/taskd-1.1.0/src/tls/TLSServer.h	/^  int                              _queue;$/;"	m	class:TLSServer	typeref:typename:int
_queue_size	proxy_workdir/taskd-1.1.0/src/Server.h	/^  int _queue_size;$/;"	m	class:Server	typeref:typename:int
_regex	proxy_workdir/taskd-1.1.0/src/RX.h	/^  regex_t _regex;$/;"	m	class:RX	typeref:typename:regex_t
_repetition	proxy_workdir/taskd-1.1.0/src/Log.h	/^  int         _repetition;$/;"	m	class:Log	typeref:typename:int
_request_count	proxy_workdir/taskd-1.1.0/src/Server.h	/^  int _request_count;$/;"	m	class:Server	typeref:typename:int
_running	proxy_workdir/taskd-1.1.0/src/Timer.h	/^  bool           _running;$/;"	m	class:Timer	typeref:typename:bool
_saved	proxy_workdir/taskd-1.1.0/src/Nibbler.h	/^  std::string::size_type _saved;$/;"	m	class:Nibbler	typeref:typename:std::string::size_type
_secs	proxy_workdir/taskd-1.1.0/src/Duration.h	/^  time_t _secs;$/;"	m	class:Duration	typeref:typename:time_t
_session	proxy_workdir/taskd-1.1.0/src/TLSClient.h	/^  gnutls_session_t                 _session;$/;"	m	class:TLSClient	typeref:typename:gnutls_session_t
_session	proxy_workdir/taskd-1.1.0/src/TLSServer.h	/^  gnutls_session_t            _session;$/;"	m	class:TLSTransaction	typeref:typename:gnutls_session_t
_session	proxy_workdir/taskd-1.1.0/src/tls/TLSClient.h	/^  gnutls_session_t                 _session;$/;"	m	class:TLSClient	typeref:typename:gnutls_session_t
_session	proxy_workdir/taskd-1.1.0/src/tls/TLSServer.h	/^  gnutls_session_t            _session;$/;"	m	class:TLSTransaction	typeref:typename:gnutls_session_t
_sighup	proxy_workdir/taskd-1.1.0/src/Server.cpp	/^bool _sighup  = false;$/;"	v	typeref:typename:bool
_sigusr1	proxy_workdir/taskd-1.1.0/src/Server.cpp	/^bool _sigusr1 = false;$/;"	v	typeref:typename:bool
_sigusr2	proxy_workdir/taskd-1.1.0/src/Server.cpp	/^bool _sigusr2 = false;$/;"	v	typeref:typename:bool
_socket	proxy_workdir/taskd-1.1.0/src/TLSClient.h	/^  int                              _socket;$/;"	m	class:TLSClient	typeref:typename:int
_socket	proxy_workdir/taskd-1.1.0/src/TLSServer.h	/^  int                              _socket;$/;"	m	class:TLSServer	typeref:typename:int
_socket	proxy_workdir/taskd-1.1.0/src/TLSServer.h	/^  int                         _socket;$/;"	m	class:TLSTransaction	typeref:typename:int
_socket	proxy_workdir/taskd-1.1.0/src/tls/TLSClient.h	/^  int                              _socket;$/;"	m	class:TLSClient	typeref:typename:int
_socket	proxy_workdir/taskd-1.1.0/src/tls/TLSServer.h	/^  int                              _socket;$/;"	m	class:TLSServer	typeref:typename:int
_socket	proxy_workdir/taskd-1.1.0/src/tls/TLSServer.h	/^  int                         _socket;$/;"	m	class:TLSTransaction	typeref:typename:int
_start	proxy_workdir/taskd-1.1.0/src/Timer.h	/^  struct timeval _start;$/;"	m	class:HighResTimer	typeref:struct:timeval
_start	proxy_workdir/taskd-1.1.0/src/Timer.h	/^  struct timeval _start;$/;"	m	class:Timer	typeref:struct:timeval
_start	proxy_workdir/taskd-1.1.0/src/daemon.cpp	/^  Date _start;$/;"	m	class:Daemon	typeref:typename:Date	file:
_stop	proxy_workdir/taskd-1.1.0/src/Timer.h	/^  struct timeval _stop;$/;"	m	class:HighResTimer	typeref:struct:timeval
_t	proxy_workdir/taskd-1.1.0/src/Date.h	/^  time_t _t;$/;"	m	class:Date	typeref:typename:time_t
_total	proxy_workdir/taskd-1.1.0/src/Timer.h	/^  unsigned long  _total;$/;"	m	class:Timer	typeref:typename:unsigned long
_trust	proxy_workdir/taskd-1.1.0/src/TLSClient.h	/^  enum trust_level                 _trust;$/;"	m	class:TLSClient	typeref:enum:trust_level
_trust	proxy_workdir/taskd-1.1.0/src/TLSServer.h	/^  enum TLSServer::trust_level _trust;$/;"	m	class:TLSTransaction	typeref:enum:TLSServer::trust_level
_trust	proxy_workdir/taskd-1.1.0/src/TLSServer.h	/^  enum trust_level                 _trust;$/;"	m	class:TLSServer	typeref:enum:trust_level
_trust	proxy_workdir/taskd-1.1.0/src/tls/TLSClient.h	/^  enum trust_level                 _trust;$/;"	m	class:TLSClient	typeref:enum:trust_level
_trust	proxy_workdir/taskd-1.1.0/src/tls/TLSServer.h	/^  enum TLSServer::trust_level _trust;$/;"	m	class:TLSTransaction	typeref:enum:TLSServer::trust_level
_trust	proxy_workdir/taskd-1.1.0/src/tls/TLSServer.h	/^  enum trust_level                 _trust;$/;"	m	class:TLSServer	typeref:enum:trust_level
_txn_count	proxy_workdir/taskd-1.1.0/src/daemon.cpp	/^  long _txn_count;$/;"	m	class:Daemon	typeref:typename:long	file:
_uuid_min_length	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^static const unsigned int _uuid_min_length = 8;$/;"	v	typeref:typename:const unsigned int	file:
_uuid_pattern	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^static const char*        _uuid_pattern    = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx";$/;"	v	typeref:typename:const char *	file:
_value	proxy_workdir/taskd-1.1.0/src/Color.h	/^  unsigned int _value;$/;"	m	class:Color	typeref:typename:unsigned int
accept	proxy_workdir/taskd-1.1.0/src/TLSServer.cpp	/^void TLSServer::accept (TLSTransaction& tx)$/;"	f	class:TLSServer	typeref:typename:void
accept	proxy_workdir/taskd-1.1.0/src/tls/TLSServer.cpp	/^void TLSServer::accept (TLSTransaction& tx)$/;"	f	class:TLSServer	typeref:typename:void
addAnnotation	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^void Task::addAnnotation (const std::string& description)$/;"	f	class:Task	typeref:typename:void
addDependency	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^void Task::addDependency (const std::string& uuid)$/;"	f	class:Task	typeref:typename:void
addDependency	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^void Task::addDependency (int id)$/;"	f	class:Task	typeref:typename:void
addTag	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^void Task::addTag (const std::string& tag)$/;"	f	class:Task	typeref:typename:void
addTags	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^void Task::addTags (const std::vector <std::string>& tags)$/;"	f	class:Task	typeref:typename:void
add_group	proxy_workdir/taskd-1.1.0/src/Database.cpp	/^bool Database::add_group ($/;"	f	class:Database	typeref:typename:bool
add_org	proxy_workdir/taskd-1.1.0/src/Database.cpp	/^bool Database::add_org (const std::string& org)$/;"	f	class:Database	typeref:typename:bool
add_user	proxy_workdir/taskd-1.1.0/src/Database.cpp	/^bool Database::add_user ($/;"	f	class:Database	typeref:typename:bool
all	Makefile	/^all: build$/;"	t
all	proxy_workdir/taskd-1.1.0/src/ConfigFile.cpp	/^void Config::all (std::vector<std::string>& items) const$/;"	f	class:Config	typeref:typename:void
all	proxy_workdir/taskd-1.1.0/src/Msg.cpp	/^void Msg::all (std::vector <std::string>& names) const$/;"	f	class:Msg	typeref:typename:void
all	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^std::vector <std::string> Task::all ()$/;"	f	class:Task	typeref:typename:std::vector<std::string>
allColors	proxy_workdir/taskd-1.1.0/src/Color.cpp	/^} allColors[] =$/;"	v	typeref:struct:__anonfc85177f0108[]
allow_all	proxy_workdir/taskd-1.1.0/src/TLSClient.h	/^  enum trust_level { strict, ignore_hostname, allow_all };$/;"	e	enum:TLSClient::trust_level
allow_all	proxy_workdir/taskd-1.1.0/src/TLSServer.h	/^  enum trust_level { strict, allow_all };$/;"	e	enum:TLSServer::trust_level
allow_all	proxy_workdir/taskd-1.1.0/src/tls/TLSClient.h	/^  enum trust_level { strict, ignore_hostname, allow_all };$/;"	e	enum:TLSClient::trust_level
allow_all	proxy_workdir/taskd-1.1.0/src/tls/TLSServer.h	/^  enum trust_level { strict, allow_all };$/;"	e	enum:TLSServer::trust_level
annotation_count	proxy_workdir/taskd-1.1.0/src/Task.h	/^  int annotation_count;$/;"	m	class:Task	typeref:typename:int
append	proxy_workdir/taskd-1.1.0/src/File.cpp	/^bool File::append ($/;"	f	class:File	typeref:typename:bool
append	proxy_workdir/taskd-1.1.0/src/File.cpp	/^bool File::append (const std::string& name, const std::string& contents)$/;"	f	class:File	typeref:typename:bool
append	proxy_workdir/taskd-1.1.0/src/File.cpp	/^void File::append (const std::string& line)$/;"	f	class:File	typeref:typename:void
append	proxy_workdir/taskd-1.1.0/src/File.cpp	/^void File::append (const std::vector <std::string>& lines)$/;"	f	class:File	typeref:typename:void
append_server_data	proxy_workdir/taskd-1.1.0/src/daemon.cpp	/^void Daemon::append_server_data ($/;"	f	class:Daemon	typeref:typename:void
args	proxy_workdir/taskd-1.1.0/scripts/l10n	/^  args = parser.parse_args()$/;"	v
args	proxy_workdir/taskd-1.1.0/scripts/profile.py	/^  args = parser.parse_args()$/;"	v
array	proxy_workdir/taskd-1.1.0/src/JSON.h	/^    array () {}$/;"	f	class:json::array
array	proxy_workdir/taskd-1.1.0/src/JSON.h	/^  class array : public value$/;"	c	namespace:json
attributes	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^std::map <std::string, std::string> Task::attributes;$/;"	m	class:Task	typeref:typename:std::map<std::string,std::string>
attributes	proxy_workdir/taskd-1.1.0/src/Task.h	/^  static std::map <std::string, std::string> attributes;  \/\/ name -> type$/;"	m	class:Task	typeref:typename:std::map<std::string,std::string>
authenticate	proxy_workdir/taskd-1.1.0/src/Database.cpp	/^bool Database::authenticate ($/;"	f	class:Database	typeref:typename:bool
autoComplete	proxy_workdir/taskd-1.1.0/src/util.cpp	/^int autoComplete ($/;"	f	typeref:typename:int
backN	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^bool Nibbler::backN (const int quantity \/*= 1*\/)$/;"	f	class:Nibbler	typeref:typename:bool
base	proxy_workdir/taskd-1.1.0/scripts/l10n	/^  base = filter(lambda x: x.endswith(REFERENCE), args.files)[0]$/;"	v
beginServer	proxy_workdir/taskd-1.1.0/src/Server.cpp	/^void Server::beginServer ()$/;"	f	class:Server	typeref:typename:void
bg	proxy_workdir/taskd-1.1.0/src/Color.cpp	/^std::string Color::bg () const$/;"	f	class:Color	typeref:typename:std::string
bind	proxy_workdir/taskd-1.1.0/src/TLSServer.cpp	/^void TLSServer::bind ($/;"	f	class:TLSServer	typeref:typename:void
bind	proxy_workdir/taskd-1.1.0/src/tls/TLSServer.cpp	/^void TLSServer::bind (const std::string& host, const std::string& port)$/;"	f	class:TLSServer	typeref:typename:void
bisearch	proxy_workdir/taskd-1.1.0/src/wcwidth6.cpp	/^static int bisearch(wchar_t ucs, const struct interval *table, int max) {$/;"	f	typeref:typename:int	file:
black	proxy_workdir/taskd-1.1.0/src/Color.h	/^  enum color_id {nocolor = 0, black, red, green, yellow, blue, magenta, cyan, white};$/;"	e	enum:Color::color_id
blend	proxy_workdir/taskd-1.1.0/src/Color.cpp	/^void Color::blend (const Color& other)$/;"	f	class:Color	typeref:typename:void
blue	proxy_workdir/taskd-1.1.0/src/Color.h	/^  enum color_id {nocolor = 0, black, red, green, yellow, blue, magenta, cyan, white};$/;"	e	enum:Color::color_id
bounce	proxy_workdir/taskd-1.1.0/scripts/profile.py	/^bounce          = re.compile('==== taskd')$/;"	v
btime	proxy_workdir/taskd-1.1.0/src/File.cpp	/^time_t File::btime () const$/;"	f	class:File	typeref:typename:time_t
build	Makefile	/^build:$/;"	t
build_nocache	Makefile	/^build_nocache:$/;"	t
bye	proxy_workdir/taskd-1.1.0/src/TLSClient.cpp	/^void TLSClient::bye ()$/;"	f	class:TLSClient	typeref:typename:void
bye	proxy_workdir/taskd-1.1.0/src/TLSServer.cpp	/^void TLSTransaction::bye ()$/;"	f	class:TLSTransaction	typeref:typename:void
bye	proxy_workdir/taskd-1.1.0/src/tls/TLSClient.cpp	/^void TLSClient::bye ()$/;"	f	class:TLSClient	typeref:typename:void
bye	proxy_workdir/taskd-1.1.0/src/tls/TLSServer.cpp	/^void TLSTransaction::bye ()$/;"	f	class:TLSTransaction	typeref:typename:void
cd	proxy_workdir/taskd-1.1.0/src/Directory.cpp	/^bool Directory::cd () const$/;"	f	class:Directory	typeref:typename:bool
ciphers	proxy_workdir/taskd-1.1.0/src/TLSClient.cpp	/^void TLSClient::ciphers (const std::string& cipher_list)$/;"	f	class:TLSClient	typeref:typename:void
ciphers	proxy_workdir/taskd-1.1.0/src/TLSServer.cpp	/^void TLSServer::ciphers (const std::string& cipher_list)$/;"	f	class:TLSServer	typeref:typename:void
ciphers	proxy_workdir/taskd-1.1.0/src/tls/TLSClient.cpp	/^void TLSClient::ciphers (const std::string& cipher_list)$/;"	f	class:TLSClient	typeref:typename:void
ciphers	proxy_workdir/taskd-1.1.0/src/tls/TLSServer.cpp	/^void TLSServer::ciphers (const std::string& cipher_list)$/;"	f	class:TLSServer	typeref:typename:void
clear	proxy_workdir/taskd-1.1.0/src/Msg.cpp	/^void Msg::clear ()$/;"	f	class:Msg	typeref:typename:void
client	proxy_workdir/taskd-1.1.0/demo/client/malformed1	/^client()$/;"	f
close	proxy_workdir/taskd-1.1.0/src/File.cpp	/^void File::close ()$/;"	f	class:File	typeref:typename:void
closeEnough	proxy_workdir/taskd-1.1.0/src/text.cpp	/^bool closeEnough ($/;"	f	typeref:typename:bool
closeEnough	proxy_workdir/taskd-1.1.0/src/tls/text.cpp	/^bool closeEnough ($/;"	f	typeref:typename:bool
code	proxy_workdir/taskd-1.1.0/src/api.cpp	/^  int code;$/;"	m	struct:__anon8b6a76ba0108	typeref:typename:int	file:
coefficients	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^std::map <std::string, float> Task::coefficients;$/;"	m	class:Task	typeref:typename:std::map<std::string,float>
coefficients	proxy_workdir/taskd-1.1.0/src/Task.h	/^  static std::map <std::string, float> coefficients;$/;"	m	class:Task	typeref:typename:std::map<std::string,float>
color_id	proxy_workdir/taskd-1.1.0/src/Color.h	/^  enum color_id {nocolor = 0, black, red, green, yellow, blue, magenta, cyan, white};$/;"	g	class:Color
colorize	proxy_workdir/taskd-1.1.0/src/Color.cpp	/^std::string Color::colorize (const std::string& input)$/;"	f	class:Color	typeref:typename:std::string
colorize	proxy_workdir/taskd-1.1.0/src/Color.cpp	/^std::string Color::colorize (const std::string& input, const std::string& spec)$/;"	f	class:Color	typeref:typename:std::string
command_add	proxy_workdir/taskd-1.1.0/src/admin.cpp	/^void command_add (Database& db, const std::vector <std::string>& args)$/;"	f	typeref:typename:void
command_client	proxy_workdir/taskd-1.1.0/src/client.cpp	/^void command_client (Database& db, const std::vector <std::string>& args)$/;"	f	typeref:typename:void
command_config	proxy_workdir/taskd-1.1.0/src/config.cpp	/^void command_config (Database& db, const std::vector <std::string>& args)$/;"	f	typeref:typename:void
command_diag	proxy_workdir/taskd-1.1.0/src/diag.cpp	/^void command_diag (Database& config, const std::vector <std::string>& args)$/;"	f	typeref:typename:void
command_help	proxy_workdir/taskd-1.1.0/src/help.cpp	/^void command_help (const std::vector <std::string>& args)$/;"	f	typeref:typename:void
command_init	proxy_workdir/taskd-1.1.0/src/init.cpp	/^void command_init (Database& db, const std::vector <std::string>& args)$/;"	f	typeref:typename:void
command_remove	proxy_workdir/taskd-1.1.0/src/admin.cpp	/^void command_remove (Database& db, const std::vector <std::string>& args)$/;"	f	typeref:typename:void
command_resume	proxy_workdir/taskd-1.1.0/src/admin.cpp	/^void command_resume (Database& db, const std::vector <std::string>& args)$/;"	f	typeref:typename:void
command_server	proxy_workdir/taskd-1.1.0/src/daemon.cpp	/^void command_server (Database& db, const std::vector <std::string>& args)$/;"	f	typeref:typename:void
command_status	proxy_workdir/taskd-1.1.0/src/status.cpp	/^void command_status (Database& db, const std::vector <std::string>& args)$/;"	f	typeref:typename:void
command_suspend	proxy_workdir/taskd-1.1.0/src/admin.cpp	/^void command_suspend (Database& db, const std::vector <std::string>& args)$/;"	f	typeref:typename:void
command_validate	proxy_workdir/taskd-1.1.0/src/diag.cpp	/^void command_validate (Database& config, const std::vector <std::string>& args)$/;"	f	typeref:typename:void
commify	proxy_workdir/taskd-1.1.0/src/text.cpp	/^std::string commify (const std::string& data)$/;"	f	typeref:typename:std::string
commify	proxy_workdir/taskd-1.1.0/src/tls/text.cpp	/^std::string commify (const std::string& data)$/;"	f	typeref:typename:std::string
compare	proxy_workdir/taskd-1.1.0/src/text.cpp	/^bool compare ($/;"	f	typeref:typename:bool
compare	proxy_workdir/taskd-1.1.0/src/tls/text.cpp	/^bool compare ($/;"	f	typeref:typename:bool
compile	proxy_workdir/taskd-1.1.0/src/RX.cpp	/^void RX::compile ()$/;"	f	class:RX	typeref:typename:void
completed	proxy_workdir/taskd-1.1.0/src/Task.h	/^  enum status {pending, completed, deleted, recurring, waiting};$/;"	e	enum:Task::status
composeF4	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^std::string Task::composeF4 () const$/;"	f	class:Task	typeref:typename:std::string
composeJSON	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^std::string Task::composeJSON (bool decorate \/*= false*\/) const$/;"	f	class:Task	typeref:typename:std::string
configure	proxy_workdir/taskd-1.1.0/scripts/setup_server.bash	/^configure()$/;"	f
confirm	proxy_workdir/taskd-1.1.0/src/util.cpp	/^bool confirm (const std::string& question)$/;"	f	typeref:typename:bool
connect	proxy_workdir/taskd-1.1.0/src/TLSClient.cpp	/^void TLSClient::connect (const std::string& host, const std::string& port)$/;"	f	class:TLSClient	typeref:typename:void
connect	proxy_workdir/taskd-1.1.0/src/tls/TLSClient.cpp	/^void TLSClient::connect (const std::string& host, const std::string& port)$/;"	f	class:TLSClient	typeref:typename:void
contains	proxy_workdir/taskd-1.1.0/src/daemon.cpp	/^bool Daemon::contains ($/;"	f	class:Daemon	typeref:typename:bool
create	proxy_workdir/taskd-1.1.0/src/Directory.cpp	/^bool Directory::create (int mode \/* = 0755 *\/)$/;"	f	class:Directory	typeref:typename:bool
create	proxy_workdir/taskd-1.1.0/src/File.cpp	/^bool File::create (const std::string& name, int mode \/* = 0640 *\/)$/;"	f	class:File	typeref:typename:bool
create	proxy_workdir/taskd-1.1.0/src/File.cpp	/^bool File::create (int mode \/* = 0640 *\/)$/;"	f	class:File	typeref:typename:bool
ctime	proxy_workdir/taskd-1.1.0/src/File.cpp	/^time_t File::ctime () const$/;"	f	class:File	typeref:typename:time_t
cursor	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^std::string::size_type Nibbler::cursor ()$/;"	f	class:Nibbler	typeref:typename:std::string::size_type
cwd	proxy_workdir/taskd-1.1.0/src/Directory.cpp	/^std::string Directory::cwd ()$/;"	f	class:Directory	typeref:typename:std::string
cyan	proxy_workdir/taskd-1.1.0/src/Color.h	/^  enum color_id {nocolor = 0, black, red, green, yellow, blue, magenta, cyan, white};$/;"	e	enum:Color::color_id
daemonize	proxy_workdir/taskd-1.1.0/src/Server.cpp	/^void Server::daemonize ()$/;"	f	class:Server	typeref:typename:void
damerau_levenshtein	proxy_workdir/taskd-1.1.0/src/text.cpp	/^int damerau_levenshtein (const char* left, const char* right)$/;"	f	typeref:typename:int
day	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^int Date::day () const$/;"	f	class:Date	typeref:typename:int
dayName	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^std::string Date::dayName (int dow)$/;"	f	class:Date	typeref:typename:std::string
dayName	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^void Date::dayName (int dow, std::string& name)$/;"	f	class:Date	typeref:typename:void
dayOfWeek	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^int Date::dayOfWeek () const$/;"	f	class:Date	typeref:typename:int
dayOfWeek	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^int Date::dayOfWeek (const std::string& input)$/;"	f	class:Date	typeref:typename:int
dayOfYear	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^int Date::dayOfYear () const$/;"	f	class:Date	typeref:typename:int
daysInMonth	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^int Date::daysInMonth (int month, int year)$/;"	f	class:Date	typeref:typename:int
daysInYear	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^int Date::daysInYear (int year)$/;"	f	class:Date	typeref:typename:int
debug	proxy_workdir/taskd-1.1.0/src/TLSClient.cpp	/^void TLSClient::debug (int level)$/;"	f	class:TLSClient	typeref:typename:void
debug	proxy_workdir/taskd-1.1.0/src/TLSServer.cpp	/^void TLSServer::debug (int level)$/;"	f	class:TLSServer	typeref:typename:void
debug	proxy_workdir/taskd-1.1.0/src/TLSServer.cpp	/^void TLSTransaction::debug ()$/;"	f	class:TLSTransaction	typeref:typename:void
debug	proxy_workdir/taskd-1.1.0/src/tls/TLSClient.cpp	/^void TLSClient::debug (int level)$/;"	f	class:TLSClient	typeref:typename:void
debug	proxy_workdir/taskd-1.1.0/src/tls/TLSServer.cpp	/^void TLSServer::debug (int level)$/;"	f	class:TLSServer	typeref:typename:void
debug	proxy_workdir/taskd-1.1.0/src/tls/TLSServer.cpp	/^void TLSTransaction::debug ()$/;"	f	class:TLSTransaction	typeref:typename:void
decode	proxy_workdir/taskd-1.1.0/src/JSON.cpp	/^std::string json::decode (const std::string& input)$/;"	f	class:json	typeref:typename:std::string
decode	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^const std::string Task::decode (const std::string& value) const$/;"	f	class:Task	typeref:typename:const std::string
decode	proxy_workdir/taskd-1.1.0/src/util.cpp	/^const std::string decode (const std::string& value)$/;"	f	typeref:typename:const std::string
defaultDue	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^std::string Task::defaultDue      = "";$/;"	m	class:Task	typeref:typename:std::string
defaultDue	proxy_workdir/taskd-1.1.0/src/Task.h	/^  static std::string defaultDue;$/;"	m	class:Task	typeref:typename:std::string
defaultProject	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^std::string Task::defaultProject  = "";$/;"	m	class:Task	typeref:typename:std::string
defaultProject	proxy_workdir/taskd-1.1.0/src/Task.h	/^  static std::string defaultProject;$/;"	m	class:Task	typeref:typename:std::string
delete_penalty	proxy_workdir/taskd-1.1.0/src/text.cpp	/^const int delete_penalty = 1;$/;"	v	typeref:typename:const int
deleted	proxy_workdir/taskd-1.1.0/src/Task.h	/^  enum status {pending, completed, deleted, recurring, waiting};$/;"	e	enum:Task::status
depleted	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^bool Nibbler::depleted ()$/;"	f	class:Nibbler	typeref:typename:bool
description	proxy_workdir/taskd-1.1.0/src/Color.cpp	/^  std::string description;$/;"	v	typeref:typename:std::string
determineVersion	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^int Task::determineVersion (const std::string& line)$/;"	f	class:Task	typeref:typename:int
digitsOnly	proxy_workdir/taskd-1.1.0/src/text.cpp	/^bool digitsOnly (const std::string& input)$/;"	f	typeref:typename:bool
digitsOnly	proxy_workdir/taskd-1.1.0/src/tls/text.cpp	/^bool digitsOnly (const std::string& input)$/;"	f	typeref:typename:bool
dirty	proxy_workdir/taskd-1.1.0/src/ConfigFile.cpp	/^bool Config::dirty ()$/;"	f	class:Config	typeref:typename:bool
doc_FILES	proxy_workdir/taskd-1.1.0/CMakeLists.txt	/^set (doc_FILES NEWS ChangeLog INSTALL AUTHORS COPYING)$/;"	v
dummy	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^static const std::string dummy ("");$/;"	v	typeref:typename:const std::string	file:
dump	proxy_workdir/taskd-1.1.0/src/JSON.cpp	/^std::string json::array::dump ()$/;"	f	class:json::array	typeref:typename:std::string
dump	proxy_workdir/taskd-1.1.0/src/JSON.cpp	/^std::string json::literal::dump ()$/;"	f	class:json::literal	typeref:typename:std::string
dump	proxy_workdir/taskd-1.1.0/src/JSON.cpp	/^std::string json::number::dump ()$/;"	f	class:json::number	typeref:typename:std::string
dump	proxy_workdir/taskd-1.1.0/src/JSON.cpp	/^std::string json::object::dump ()$/;"	f	class:json::object	typeref:typename:std::string
dump	proxy_workdir/taskd-1.1.0/src/JSON.cpp	/^std::string json::string::dump ()$/;"	f	class:json::string	typeref:typename:std::string
dump	proxy_workdir/taskd-1.1.0/src/JSON.cpp	/^std::string json::value::dump ()$/;"	f	class:json::value	typeref:typename:std::string
dump	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^std::string Nibbler::dump ()$/;"	f	class:Nibbler	typeref:typename:std::string
durations	proxy_workdir/taskd-1.1.0/src/Duration.cpp	/^static const char* durations[] =$/;"	v	typeref:typename:const char * []	file:
easter	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^time_t Date::easter (int year)$/;"	f	class:Date	typeref:typename:time_t
encode	proxy_workdir/taskd-1.1.0/src/JSON.cpp	/^std::string json::encode (const std::string& input)$/;"	f	class:json	typeref:typename:std::string
encode	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^const std::string Task::encode (const std::string& value) const$/;"	f	class:Task	typeref:typename:const std::string
encode	proxy_workdir/taskd-1.1.0/src/util.cpp	/^const std::string encode (const std::string& value)$/;"	f	typeref:typename:const std::string
english_name	proxy_workdir/taskd-1.1.0/src/Color.cpp	/^  std::string english_name;$/;"	m	struct:__anonfc85177f0108	typeref:typename:std::string	file:
epsilon	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^static const float epsilon = 0.000001;$/;"	v	typeref:typename:const float	file:
error	proxy_workdir/taskd-1.1.0/scripts/profile.py	/^error           = re.compile('ERROR (\\d+)')$/;"	v
error	proxy_workdir/taskd-1.1.0/src/api.cpp	/^  std::string error;$/;"	m	struct:__anon8b6a76ba0108	typeref:typename:std::string	file:
error_internal	proxy_workdir/taskd-1.1.0/scripts/profile.py	/^error_internal  = re.compile('ERROR')$/;"	v
errors	proxy_workdir/taskd-1.1.0/src/api.cpp	/^} errors[] =$/;"	v	typeref:struct:__anon8b6a76ba0108[]
escape	proxy_workdir/taskd-1.1.0/src/util.cpp	/^const std::string escape (const std::string& value, char c)$/;"	f	typeref:typename:const std::string
exec_as	install/functions.src.sh	/^exec_as() {$/;"	f
executable	proxy_workdir/taskd-1.1.0/src/Path.cpp	/^bool Path::executable () const$/;"	f	class:Path	typeref:typename:bool
exists	proxy_workdir/taskd-1.1.0/src/Path.cpp	/^bool Path::exists () const$/;"	f	class:Path	typeref:typename:bool
expand	proxy_workdir/taskd-1.1.0/src/Path.cpp	/^std::string Path::expand (const std::string& in)$/;"	f	class:Path	typeref:typename:std::string
extension	proxy_workdir/taskd-1.1.0/src/Path.cpp	/^std::string Path::extension () const$/;"	f	class:Path	typeref:typename:std::string
extract_subset	proxy_workdir/taskd-1.1.0/src/daemon.cpp	/^void Daemon::extract_subset ($/;"	f	class:Daemon	typeref:typename:void
falsevalue	proxy_workdir/taskd-1.1.0/src/JSON.h	/^    enum literal_value {none, nullvalue, falsevalue, truevalue};$/;"	e	enum:json::literal::literal_value
fg	proxy_workdir/taskd-1.1.0/src/Color.cpp	/^std::string Color::fg () const$/;"	f	class:Color	typeref:typename:std::string
find	proxy_workdir/taskd-1.1.0/src/Color.cpp	/^int Color::find (const std::string& input)$/;"	f	class:Color	typeref:typename:int
find	proxy_workdir/taskd-1.1.0/src/text.cpp	/^std::string::size_type find ($/;"	f	typeref:typename:std::string::size_type
find	proxy_workdir/taskd-1.1.0/src/tls/text.cpp	/^std::string::size_type find ($/;"	f	typeref:typename:std::string::size_type
find_branch_point	proxy_workdir/taskd-1.1.0/src/daemon.cpp	/^unsigned int Daemon::find_branch_point ($/;"	f	class:Daemon	typeref:typename:unsigned int
find_common_ancestor	proxy_workdir/taskd-1.1.0/src/daemon.cpp	/^unsigned int Daemon::find_common_ancestor ($/;"	f	class:Daemon	typeref:typename:unsigned int
find_localizations	proxy_workdir/taskd-1.1.0/scripts/l10n	/^def find_localizations(source, single=''):$/;"	f
first	proxy_workdir/taskd-1.1.0/src/wcwidth6.cpp	/^  int first;$/;"	m	struct:interval	typeref:typename:int	file:
format	proxy_workdir/taskd-1.1.0/src/Duration.cpp	/^std::string Duration::format () const$/;"	f	class:Duration	typeref:typename:std::string
format	proxy_workdir/taskd-1.1.0/src/Log.cpp	/^void Log::format (const char* message, ...)$/;"	f	class:Log	typeref:typename:void
format	proxy_workdir/taskd-1.1.0/src/text.cpp	/^const std::string format ($/;"	f	typeref:typename:const std::string
format	proxy_workdir/taskd-1.1.0/src/text.cpp	/^const std::string format (char value)$/;"	f	typeref:typename:const std::string
format	proxy_workdir/taskd-1.1.0/src/text.cpp	/^const std::string format (double value)$/;"	f	typeref:typename:const std::string
format	proxy_workdir/taskd-1.1.0/src/text.cpp	/^const std::string format (double value, int width, int precision)$/;"	f	typeref:typename:const std::string
format	proxy_workdir/taskd-1.1.0/src/text.cpp	/^const std::string format (float value, int width, int precision)$/;"	f	typeref:typename:const std::string
format	proxy_workdir/taskd-1.1.0/src/text.cpp	/^const std::string format (int value)$/;"	f	typeref:typename:const std::string
format	proxy_workdir/taskd-1.1.0/src/tls/text.cpp	/^const std::string format ($/;"	f	typeref:typename:const std::string
format	proxy_workdir/taskd-1.1.0/src/tls/text.cpp	/^const std::string format (char value)$/;"	f	typeref:typename:const std::string
format	proxy_workdir/taskd-1.1.0/src/tls/text.cpp	/^const std::string format (double value)$/;"	f	typeref:typename:const std::string
format	proxy_workdir/taskd-1.1.0/src/tls/text.cpp	/^const std::string format (double value, int width, int precision)$/;"	f	typeref:typename:const std::string
format	proxy_workdir/taskd-1.1.0/src/tls/text.cpp	/^const std::string format (float value, int width, int precision)$/;"	f	typeref:typename:const std::string
format	proxy_workdir/taskd-1.1.0/src/tls/text.cpp	/^const std::string format (int value)$/;"	f	typeref:typename:const std::string
formatBytes	proxy_workdir/taskd-1.1.0/src/util.cpp	/^std::string formatBytes (size_t bytes)$/;"	f	typeref:typename:std::string
formatCompact	proxy_workdir/taskd-1.1.0/src/Duration.cpp	/^std::string Duration::formatCompact () const$/;"	f	class:Duration	typeref:typename:std::string
formatHex	proxy_workdir/taskd-1.1.0/src/text.cpp	/^const std::string formatHex (int value)$/;"	f	typeref:typename:const std::string
formatHex	proxy_workdir/taskd-1.1.0/src/tls/text.cpp	/^const std::string formatHex (int value)$/;"	f	typeref:typename:const std::string
formatISO	proxy_workdir/taskd-1.1.0/src/Duration.cpp	/^std::string Duration::formatISO () const$/;"	f	class:Duration	typeref:typename:std::string
formatPrecise	proxy_workdir/taskd-1.1.0/src/Duration.cpp	/^std::string Duration::formatPrecise () const$/;"	f	class:Duration	typeref:typename:std::string
formatSeconds	proxy_workdir/taskd-1.1.0/src/Duration.cpp	/^std::string Duration::formatSeconds () const$/;"	f	class:Duration	typeref:typename:std::string
formatTime	proxy_workdir/taskd-1.1.0/src/util.cpp	/^std::string formatTime (time_t seconds)$/;"	f	typeref:typename:std::string
generate_payload	proxy_workdir/taskd-1.1.0/src/daemon.cpp	/^std::string Daemon::generate_payload ($/;"	f	class:Daemon	typeref:typename:std::string
get	proxy_workdir/taskd-1.1.0/src/ConfigFile.cpp	/^const std::string Config::get (const std::string& key)$/;"	f	class:Config	typeref:typename:const std::string
get	proxy_workdir/taskd-1.1.0/src/Msg.cpp	/^std::string Msg::get (const std::string& name) const$/;"	f	class:Msg	typeref:typename:std::string
get	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^const std::string Task::get (const std::string& name) const$/;"	f	class:Task	typeref:typename:const std::string
getAnnotations	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^void Task::getAnnotations (std::map <std::string, std::string>& annotations) const$/;"	f	class:Task	typeref:typename:void
getBoolean	proxy_workdir/taskd-1.1.0/src/ConfigFile.cpp	/^const bool Config::getBoolean (const std::string& key)$/;"	f	class:Config	typeref:typename:const bool
getClient	proxy_workdir/taskd-1.1.0/src/TLSServer.cpp	/^void TLSTransaction::getClient (std::string& address, int& port)$/;"	f	class:TLSTransaction	typeref:typename:void
getClient	proxy_workdir/taskd-1.1.0/src/tls/TLSServer.cpp	/^void TLSTransaction::getClient (std::string& address, int& port)$/;"	f	class:TLSTransaction	typeref:typename:void
getDate	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^bool Nibbler::getDate (const std::string& format, time_t& t)$/;"	f	class:Nibbler	typeref:typename:bool
getDateISO	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^bool Nibbler::getDateISO (time_t& t)$/;"	f	class:Nibbler	typeref:typename:bool
getDependencies	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^void Task::getDependencies (std::vector <int>& all) const$/;"	f	class:Task	typeref:typename:void
getDependencies	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^void Task::getDependencies (std::vector <std::string>& all) const$/;"	f	class:Task	typeref:typename:void
getDigit	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^bool Nibbler::getDigit (int& result)$/;"	f	class:Nibbler	typeref:typename:bool
getDigit2	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^bool Nibbler::getDigit2 (int& result)$/;"	f	class:Nibbler	typeref:typename:bool
getDigit3	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^bool Nibbler::getDigit3 (int& result)$/;"	f	class:Nibbler	typeref:typename:bool
getDigit4	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^bool Nibbler::getDigit4 (int& result)$/;"	f	class:Nibbler	typeref:typename:bool
getDigit6	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^bool Nibbler::getDigit6 (int& result)$/;"	f	class:Nibbler	typeref:typename:bool
getInt	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^bool Nibbler::getInt (int& result)$/;"	f	class:Nibbler	typeref:typename:bool
getInteger	proxy_workdir/taskd-1.1.0/src/ConfigFile.cpp	/^const int Config::getInteger (const std::string& key)$/;"	f	class:Config	typeref:typename:const int
getLiteral	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^bool Nibbler::getLiteral (const std::string& literal)$/;"	f	class:Nibbler	typeref:typename:bool
getN	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^bool Nibbler::getN (const int quantity, std::string& result)$/;"	f	class:Nibbler	typeref:typename:bool
getName	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^bool Nibbler::getName (std::string& result)$/;"	f	class:Nibbler	typeref:typename:bool
getNumber	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^bool Nibbler::getNumber (double &result)$/;"	f	class:Nibbler	typeref:typename:bool
getNumber	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^bool Nibbler::getNumber (std::string& result)$/;"	f	class:Nibbler	typeref:typename:bool
getOneOf	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^bool Nibbler::getOneOf ($/;"	f	class:Nibbler	typeref:typename:bool
getPartialUUID	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^bool Nibbler::getPartialUUID (std::string& result)$/;"	f	class:Nibbler	typeref:typename:bool
getPayload	proxy_workdir/taskd-1.1.0/src/Msg.cpp	/^std::string Msg::getPayload () const$/;"	f	class:Msg	typeref:typename:std::string
getQuoted	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^bool Nibbler::getQuoted ($/;"	f	class:Nibbler	typeref:typename:bool
getReal	proxy_workdir/taskd-1.1.0/src/ConfigFile.cpp	/^const double Config::getReal (const std::string& key)$/;"	f	class:Config	typeref:typename:const double
getRemainder	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^void Nibbler::getRemainder (std::string& result)$/;"	f	class:Nibbler	typeref:typename:void
getRx	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^bool Nibbler::getRx (const std::string& regex, std::string& result)$/;"	f	class:Nibbler	typeref:typename:bool
getStatus	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^Task::status Task::getStatus () const$/;"	f	class:Task	typeref:typename:Task::status
getTagCount	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^int Task::getTagCount () const$/;"	f	class:Task	typeref:typename:int
getTags	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^void Task::getTags (std::vector<std::string>& tags) const$/;"	f	class:Task	typeref:typename:void
getUDAOrphans	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^void Task::getUDAOrphans (std::vector <std::string>& names) const$/;"	f	class:Task	typeref:typename:void
getUDAs	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^void Task::getUDAs (std::vector <std::string>& names) const$/;"	f	class:Task	typeref:typename:void
getUUID	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^bool Nibbler::getUUID (std::string& result)$/;"	f	class:Nibbler	typeref:typename:bool
getUnsignedInt	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^bool Nibbler::getUnsignedInt (int& result)$/;"	f	class:Nibbler	typeref:typename:bool
getUnsignedNumber	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^bool Nibbler::getUnsignedNumber (double& result)$/;"	f	class:Nibbler	typeref:typename:bool
getUntil	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^bool Nibbler::getUntil (char c, std::string& result)$/;"	f	class:Nibbler	typeref:typename:bool
getUntil	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^bool Nibbler::getUntil (const std::string& terminator, std::string& result)$/;"	f	class:Nibbler	typeref:typename:bool
getUntilEOL	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^bool Nibbler::getUntilEOL (std::string& result)$/;"	f	class:Nibbler	typeref:typename:bool
getUntilEOS	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^bool Nibbler::getUntilEOS (std::string& result)$/;"	f	class:Nibbler	typeref:typename:bool
getUntilOneOf	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^bool Nibbler::getUntilOneOf (const std::string& chars, std::string& result)$/;"	f	class:Nibbler	typeref:typename:bool
getUntilRx	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^bool Nibbler::getUntilRx (const std::string& regex, std::string& result)$/;"	f	class:Nibbler	typeref:typename:bool
getUntilWS	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^bool Nibbler::getUntilWS (std::string& result)$/;"	f	class:Nibbler	typeref:typename:bool
getWord	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^bool Nibbler::getWord (std::string& result)$/;"	f	class:Nibbler	typeref:typename:bool
get_client_mods	proxy_workdir/taskd-1.1.0/src/daemon.cpp	/^void Daemon::get_client_mods ($/;"	f	class:Daemon	typeref:typename:void
get_date	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^time_t Task::get_date (const std::string& name) const$/;"	f	class:Task	typeref:typename:time_t
get_int	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^int Task::get_int (const std::string& name) const$/;"	f	class:Task	typeref:typename:int
get_ref	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^const std::string& Task::get_ref (const std::string& name) const$/;"	f	class:Task	typeref:typename:const std::string &
get_relatives	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^const std::vector <std::string> Date::get_relatives ()$/;"	f	class:Date	typeref:typename:const std::vector<std::string>
get_server_mods	proxy_workdir/taskd-1.1.0/src/daemon.cpp	/^void Daemon::get_server_mods ($/;"	f	class:Daemon	typeref:typename:void
get_totals	proxy_workdir/taskd-1.1.0/src/daemon.cpp	/^void Daemon::get_totals ($/;"	f	class:Daemon	typeref:typename:void
get_ulong	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^unsigned long Task::get_ulong (const std::string& name) const$/;"	f	class:Task	typeref:typename:unsigned long
get_units	proxy_workdir/taskd-1.1.0/src/Duration.cpp	/^const std::vector <std::string> Duration::get_units ()$/;"	f	class:Duration	typeref:typename:const std::vector<std::string>
glob	proxy_workdir/taskd-1.1.0/src/Path.cpp	/^std::vector <std::string> Path::glob (const std::string& pattern)$/;"	f	class:Path	typeref:typename:std::vector<std::string>
gnutls_log_function	proxy_workdir/taskd-1.1.0/src/TLSClient.cpp	/^static void gnutls_log_function (int level, const char* message)$/;"	f	typeref:typename:void	file:
gnutls_log_function	proxy_workdir/taskd-1.1.0/src/TLSServer.cpp	/^static void gnutls_log_function (int level, const char* message)$/;"	f	typeref:typename:void	file:
gnutls_log_function	proxy_workdir/taskd-1.1.0/src/tls/TLSClient.cpp	/^static void gnutls_log_function (int level, const char* message)$/;"	f	typeref:typename:void	file:
gnutls_log_function	proxy_workdir/taskd-1.1.0/src/tls/TLSServer.cpp	/^static void gnutls_log_function (int level, const char* message)$/;"	f	typeref:typename:void	file:
green	proxy_workdir/taskd-1.1.0/src/Color.h	/^  enum color_id {nocolor = 0, black, red, green, yellow, blue, magenta, cyan, white};$/;"	e	enum:Color::color_id
handle_statistics	proxy_workdir/taskd-1.1.0/src/daemon.cpp	/^void Daemon::handle_statistics (const Msg& in, Msg& out)$/;"	f	class:Daemon	typeref:typename:void
handle_sync	proxy_workdir/taskd-1.1.0/src/daemon.cpp	/^void Daemon::handle_sync (const Msg& in, Msg& out)$/;"	f	class:Daemon	typeref:typename:void
handler	proxy_workdir/taskd-1.1.0/src/daemon.cpp	/^void Daemon::handler (const std::string& input, std::string& output)$/;"	f	class:Daemon	typeref:typename:void
has	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^bool Task::has (const std::string& name) const$/;"	f	class:Task	typeref:typename:bool
hasAnnotations	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^bool Task::hasAnnotations () const$/;"	f	class:Task	typeref:typename:bool
hasTag	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^bool Task::hasTag (const std::string& tag) const$/;"	f	class:Task	typeref:typename:bool
help	Makefile	/^help:$/;"	t
hour	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^int Date::hour () const$/;"	f	class:Date	typeref:typename:int
id	proxy_workdir/taskd-1.1.0/src/Color.cpp	/^  Color::color_id id;$/;"	m	struct:__anonfc85177f0108	typeref:typename:Color::color_id	file:
id	proxy_workdir/taskd-1.1.0/src/Task.h	/^  int id;$/;"	m	class:Task	typeref:typename:int
ignore_hostname	proxy_workdir/taskd-1.1.0/src/TLSClient.h	/^  enum trust_level { strict, ignore_hostname, allow_all };$/;"	e	enum:TLSClient::trust_level
ignore_hostname	proxy_workdir/taskd-1.1.0/src/tls/TLSClient.h	/^  enum trust_level { strict, ignore_hostname, allow_all };$/;"	e	enum:TLSClient::trust_level
index	proxy_workdir/taskd-1.1.0/src/Color.cpp	/^  int index;                    \/\/ offset red=3 (therefore fg=33, bg=43)$/;"	m	struct:__anonfc85177f0108	typeref:typename:int	file:
init	proxy_workdir/taskd-1.1.0/src/TLSClient.cpp	/^void TLSClient::init ($/;"	f	class:TLSClient	typeref:typename:void
init	proxy_workdir/taskd-1.1.0/src/TLSServer.cpp	/^void TLSServer::init ($/;"	f	class:TLSServer	typeref:typename:void
init	proxy_workdir/taskd-1.1.0/src/TLSServer.cpp	/^void TLSTransaction::init (TLSServer& server)$/;"	f	class:TLSTransaction	typeref:typename:void
init	proxy_workdir/taskd-1.1.0/src/tls/TLSClient.cpp	/^void TLSClient::init ($/;"	f	class:TLSClient	typeref:typename:void
init	proxy_workdir/taskd-1.1.0/src/tls/TLSServer.cpp	/^void TLSServer::init ($/;"	f	class:TLSServer	typeref:typename:void
init	proxy_workdir/taskd-1.1.0/src/tls/TLSServer.cpp	/^void TLSTransaction::init (TLSServer& server)$/;"	f	class:TLSTransaction	typeref:typename:void
insert_penalty	proxy_workdir/taskd-1.1.0/src/text.cpp	/^const int insert_penalty = 1;$/;"	v	typeref:typename:const int
interval	proxy_workdir/taskd-1.1.0/src/wcwidth6.cpp	/^struct interval {$/;"	s	file:
isEpoch	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^bool Date::isEpoch (const std::string& input)$/;"	f	class:Date	typeref:typename:bool
isPunctuation	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^bool Nibbler::isPunctuation (char c)$/;"	f	class:Nibbler	typeref:typename:bool
isRelativeDate	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^bool Date::isRelativeDate (const std::string& input)$/;"	f	class:Date	typeref:typename:bool
is_absolute	proxy_workdir/taskd-1.1.0/src/Path.cpp	/^bool Path::is_absolute () const$/;"	f	class:Path	typeref:typename:bool
is_blocked	proxy_workdir/taskd-1.1.0/src/Task.h	/^  bool is_blocked;$/;"	m	class:Task	typeref:typename:bool
is_blocking	proxy_workdir/taskd-1.1.0/src/Task.h	/^  bool is_blocking;$/;"	m	class:Task	typeref:typename:bool
is_directory	proxy_workdir/taskd-1.1.0/src/Path.cpp	/^bool Path::is_directory () const$/;"	f	class:Path	typeref:typename:bool
is_due	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^bool Task::is_due () const$/;"	f	class:Task	typeref:typename:bool
is_duemonth	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^bool Task::is_duemonth () const$/;"	f	class:Task	typeref:typename:bool
is_duetoday	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^bool Task::is_duetoday () const$/;"	f	class:Task	typeref:typename:bool
is_duetomorrow	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^bool Task::is_duetomorrow () const$/;"	f	class:Task	typeref:typename:bool
is_dueweek	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^bool Task::is_dueweek () const$/;"	f	class:Task	typeref:typename:bool
is_dueyear	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^bool Task::is_dueyear () const$/;"	f	class:Task	typeref:typename:bool
is_dueyesterday	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^bool Task::is_dueyesterday () const$/;"	f	class:Task	typeref:typename:bool
is_link	proxy_workdir/taskd-1.1.0/src/Path.cpp	/^bool Path::is_link () const$/;"	f	class:Path	typeref:typename:bool
is_overdue	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^bool Task::is_overdue () const$/;"	f	class:Task	typeref:typename:bool
is_present	proxy_workdir/taskd-1.1.0/scripts/l10n	/^def is_present(translations, file, string):$/;"	f
is_ready	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^bool Task::is_ready () const$/;"	f	class:Task	typeref:typename:bool
is_translated	proxy_workdir/taskd-1.1.0/scripts/l10n	/^def is_translated(translations, file, string):$/;"	f
j_array	proxy_workdir/taskd-1.1.0/src/JSON.h	/^    j_array,    \/\/ 2$/;"	e	enum:json::jtype
j_literal	proxy_workdir/taskd-1.1.0/src/JSON.h	/^    j_literal   \/\/ 5$/;"	e	enum:json::jtype
j_number	proxy_workdir/taskd-1.1.0/src/JSON.h	/^    j_number,   \/\/ 4$/;"	e	enum:json::jtype
j_object	proxy_workdir/taskd-1.1.0/src/JSON.h	/^    j_object,   \/\/ 1$/;"	e	enum:json::jtype
j_string	proxy_workdir/taskd-1.1.0/src/JSON.h	/^    j_string,   \/\/ 3$/;"	e	enum:json::jtype
j_value	proxy_workdir/taskd-1.1.0/src/JSON.h	/^    j_value,    \/\/ 0$/;"	e	enum:json::jtype
join	proxy_workdir/taskd-1.1.0/src/text.cpp	/^void join ($/;"	f	typeref:typename:void
join	proxy_workdir/taskd-1.1.0/src/tls/text.cpp	/^void join ($/;"	f	typeref:typename:void
json	proxy_workdir/taskd-1.1.0/src/JSON.h	/^namespace json$/;"	n
json_array_iter	proxy_workdir/taskd-1.1.0/src/JSON.h	/^typedef std::vector <json::value*>::iterator           json_array_iter;$/;"	t	typeref:typename:std::vector<json::value * >::iterator
json_object_iter	proxy_workdir/taskd-1.1.0/src/JSON.h	/^typedef std::map <std::string, json::value*>::iterator json_object_iter;$/;"	t	typeref:typename:std::map<std::string,json::value * >::iterator
jtype	proxy_workdir/taskd-1.1.0/src/JSON.h	/^  enum jtype$/;"	g	namespace:json
key_generate	proxy_workdir/taskd-1.1.0/src/Database.cpp	/^std::string Database::key_generate ()$/;"	f	class:Database	typeref:typename:std::string
last	proxy_workdir/taskd-1.1.0/src/wcwidth6.cpp	/^  int last;$/;"	m	struct:interval	typeref:typename:int	file:
last_modification	proxy_workdir/taskd-1.1.0/src/daemon.cpp	/^time_t Daemon::last_modification (const Task& task) const$/;"	f	class:Daemon	typeref:typename:time_t
leapYear	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^bool Date::leapYear (int year)$/;"	f	class:Date	typeref:typename:bool
leftJustify	proxy_workdir/taskd-1.1.0/src/text.cpp	/^std::string leftJustify (const int input, const int width)$/;"	f	typeref:typename:std::string
leftJustify	proxy_workdir/taskd-1.1.0/src/text.cpp	/^std::string leftJustify (const std::string& input, const int width)$/;"	f	typeref:typename:std::string
leftJustify	proxy_workdir/taskd-1.1.0/src/tls/text.cpp	/^std::string leftJustify (const int input, const int width)$/;"	f	typeref:typename:std::string
length	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^int Date::length (const std::string& format)$/;"	f	class:Date	typeref:typename:int
limit	proxy_workdir/taskd-1.1.0/src/TLSClient.cpp	/^void TLSClient::limit (int max)$/;"	f	class:TLSClient	typeref:typename:void
limit	proxy_workdir/taskd-1.1.0/src/TLSServer.cpp	/^void TLSTransaction::limit (int max)$/;"	f	class:TLSTransaction	typeref:typename:void
limit	proxy_workdir/taskd-1.1.0/src/tls/TLSClient.cpp	/^void TLSClient::limit (int max)$/;"	f	class:TLSClient	typeref:typename:void
limit	proxy_workdir/taskd-1.1.0/src/tls/TLSServer.cpp	/^void TLSTransaction::limit (int max)$/;"	f	class:TLSTransaction	typeref:typename:void
list	proxy_workdir/taskd-1.1.0/src/Directory.cpp	/^std::vector <std::string> Directory::list ()$/;"	f	class:Directory	typeref:typename:std::vector<std::string>
list	proxy_workdir/taskd-1.1.0/src/Directory.cpp	/^void Directory::list ($/;"	f	class:Directory	typeref:typename:void
listDiff	proxy_workdir/taskd-1.1.0/src/taskd.h	/^template <class T> bool listDiff (const T& left, const T& right)$/;"	f	typeref:typename:bool
listDiff	proxy_workdir/taskd-1.1.0/src/taskd.h	/^template <class T> void listDiff ($/;"	f	typeref:typename:void
listIntersect	proxy_workdir/taskd-1.1.0/src/taskd.h	/^template <class T> void listIntersect (const T& left, const T& right, T& join)$/;"	f	typeref:typename:void
listRecursive	proxy_workdir/taskd-1.1.0/src/Directory.cpp	/^std::vector <std::string> Directory::listRecursive ()$/;"	f	class:Directory	typeref:typename:std::vector<std::string>
listen	proxy_workdir/taskd-1.1.0/src/TLSServer.cpp	/^void TLSServer::listen ()$/;"	f	class:TLSServer	typeref:typename:void
listen	proxy_workdir/taskd-1.1.0/src/tls/TLSServer.cpp	/^void TLSServer::listen ()$/;"	f	class:TLSServer	typeref:typename:void
literal	proxy_workdir/taskd-1.1.0/src/JSON.h	/^    literal () : _lvalue (none) {}$/;"	f	class:json::literal
literal	proxy_workdir/taskd-1.1.0/src/JSON.h	/^  class literal : public value$/;"	c	namespace:json
literal_value	proxy_workdir/taskd-1.1.0/src/JSON.h	/^    enum literal_value {none, nullvalue, falsevalue, truevalue};$/;"	g	class:json::literal
load	proxy_workdir/taskd-1.1.0/src/ConfigFile.cpp	/^void Config::load (const std::string& file, int nest \/* = 1 *\/)$/;"	f	class:Config	typeref:typename:void
load_server_data	proxy_workdir/taskd-1.1.0/src/daemon.cpp	/^void Daemon::load_server_data ($/;"	f	class:Daemon	typeref:typename:void
loaded	proxy_workdir/taskd-1.1.0/scripts/profile.py	/^loaded          = re.compile('Loaded (\\d+)')$/;"	v
lock	proxy_workdir/taskd-1.1.0/src/File.cpp	/^bool File::lock ()$/;"	f	class:File	typeref:typename:bool
log	proxy_workdir/taskd-1.1.0/scripts/setup_server.bash	/^log()$/;"	f
log_error	proxy_workdir/taskd-1.1.0/scripts/setup_server.bash	/^log_error()$/;"	f
log_line	proxy_workdir/taskd-1.1.0/scripts/setup_server.bash	/^log_line()$/;"	f
log_ok	proxy_workdir/taskd-1.1.0/scripts/setup_server.bash	/^log_ok()$/;"	f
log_warning	proxy_workdir/taskd-1.1.0/scripts/setup_server.bash	/^log_warning()$/;"	f
logs	Makefile	/^logs:$/;"	t
lowerCase	proxy_workdir/taskd-1.1.0/src/text.cpp	/^std::string lowerCase (const std::string& input)$/;"	f	typeref:typename:std::string
lowerCase	proxy_workdir/taskd-1.1.0/src/tls/text.cpp	/^std::string lowerCase (const std::string& input)$/;"	f	typeref:typename:std::string
magenta	proxy_workdir/taskd-1.1.0/src/Color.h	/^  enum color_id {nocolor = 0, black, red, green, yellow, blue, magenta, cyan, white};$/;"	e	enum:Color::color_id
main	proxy_workdir/taskd-1.1.0/scripts/l10n	/^def main(args):$/;"	f
main	proxy_workdir/taskd-1.1.0/scripts/profile.py	/^def main(args):$/;"	f
main	proxy_workdir/taskd-1.1.0/src/taskd.cpp	/^int main (int argc, const char** argv)$/;"	f	typeref:typename:int
main	proxy_workdir/taskd-1.1.0/src/tls/c.cpp	/^int main (void)$/;"	f	typeref:typename:int
main	proxy_workdir/taskd-1.1.0/src/tls/s.cpp	/^int main (void)$/;"	f	typeref:typename:int
makedir	proxy_workdir/taskd-1.1.0/scripts/setup_server.bash	/^makedir()$/;"	f
man_FILES	proxy_workdir/taskd-1.1.0/doc/CMakeLists.txt	/^set (man_FILES taskd.1 taskdctl.1 taskdrc.5)$/;"	v
match	proxy_workdir/taskd-1.1.0/src/RX.cpp	/^bool RX::match ($/;"	f	class:RX	typeref:typename:bool
match	proxy_workdir/taskd-1.1.0/src/RX.cpp	/^bool RX::match (const std::string& in)$/;"	f	class:RX	typeref:typename:bool
merge_sort	proxy_workdir/taskd-1.1.0/src/daemon.cpp	/^void Daemon::merge_sort ($/;"	f	class:Daemon	typeref:typename:void
merged	proxy_workdir/taskd-1.1.0/scripts/profile.py	/^merged          = re.compile('merged (\\d+)')$/;"	v
minute	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^int Date::minute () const$/;"	f	class:Date	typeref:typename:int
mk_wcswidth	proxy_workdir/taskd-1.1.0/src/wcwidth6.cpp	/^int mk_wcswidth(const wchar_t *pwcs, size_t n)$/;"	f	typeref:typename:int
mk_wcwidth	proxy_workdir/taskd-1.1.0/src/wcwidth6.cpp	/^int mk_wcwidth(wchar_t ucs)$/;"	f	typeref:typename:int
mode	proxy_workdir/taskd-1.1.0/src/File.cpp	/^mode_t File::mode ()$/;"	f	class:File	typeref:typename:mode_t
month	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^int Date::month () const$/;"	f	class:Date	typeref:typename:int
monthName	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^std::string Date::monthName (int month)$/;"	f	class:Date	typeref:typename:std::string
monthOfYear	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^int Date::monthOfYear (const std::string& input)$/;"	f	class:Date	typeref:typename:int
mtime	proxy_workdir/taskd-1.1.0/src/File.cpp	/^time_t File::mtime () const$/;"	f	class:File	typeref:typename:time_t
name	proxy_workdir/taskd-1.1.0/src/Path.cpp	/^std::string Path::name () const$/;"	f	class:Path	typeref:typename:std::string
negative	proxy_workdir/taskd-1.1.0/src/Duration.cpp	/^bool Duration::negative () const$/;"	f	class:Duration	typeref:typename:bool
next	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^char Nibbler::next ()$/;"	f	class:Nibbler	typeref:typename:char
next	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^std::string Nibbler::next (const int quantity)$/;"	f	class:Nibbler	typeref:typename:std::string
nocolor	proxy_workdir/taskd-1.1.0/src/Color.h	/^  enum color_id {nocolor = 0, black, red, green, yellow, blue, magenta, cyan, white};$/;"	e	enum:Color::color_id
none	proxy_workdir/taskd-1.1.0/src/JSON.h	/^    enum literal_value {none, nullvalue, falsevalue, truevalue};$/;"	e	enum:json::literal::literal_value
nontrivial	proxy_workdir/taskd-1.1.0/src/Color.cpp	/^bool Color::nontrivial () const$/;"	f	class:Color	typeref:typename:bool
nullvalue	proxy_workdir/taskd-1.1.0/src/JSON.h	/^    enum literal_value {none, nullvalue, falsevalue, truevalue};$/;"	e	enum:json::literal::literal_value
number	proxy_workdir/taskd-1.1.0/src/JSON.h	/^    number () : _dvalue (0.0) {}$/;"	f	class:json::number
number	proxy_workdir/taskd-1.1.0/src/JSON.h	/^  class number : public value$/;"	c	namespace:json
object	proxy_workdir/taskd-1.1.0/src/JSON.h	/^    object () {}$/;"	f	class:json::object
object	proxy_workdir/taskd-1.1.0/src/JSON.h	/^  class object : public value$/;"	c	namespace:json
open	proxy_workdir/taskd-1.1.0/src/File.cpp	/^bool File::open ()$/;"	f	class:File	typeref:typename:bool
openAndLock	proxy_workdir/taskd-1.1.0/src/File.cpp	/^bool File::openAndLock ()$/;"	f	class:File	typeref:typename:bool
operator !=	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^bool Date::operator!= (const Date& rhs) const$/;"	f	class:Date	typeref:typename:bool
operator +	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^Date Date::operator+ (const int delta)$/;"	f	class:Date	typeref:typename:Date
operator +	proxy_workdir/taskd-1.1.0/src/Duration.cpp	/^Duration Duration::operator+ (const Duration& other)$/;"	f	class:Duration	typeref:typename:Duration
operator ++	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^void Date::operator++ ()$/;"	f	class:Date	typeref:typename:void
operator ++	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^void Date::operator++ (int)$/;"	f	class:Date	typeref:typename:void
operator +=	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^Date& Date::operator+= (const int delta)$/;"	f	class:Date	typeref:typename:Date &
operator +=	proxy_workdir/taskd-1.1.0/src/Duration.cpp	/^Duration& Duration::operator+= (const Duration& other)$/;"	f	class:Duration	typeref:typename:Duration &
operator +=	proxy_workdir/taskd-1.1.0/src/Path.cpp	/^Path& Path::operator+= (const std::string& dir)$/;"	f	class:Path	typeref:typename:Path &
operator -	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^Date Date::operator- (const int delta)$/;"	f	class:Date	typeref:typename:Date
operator -	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^time_t Date::operator- (const Date& rhs)$/;"	f	class:Date	typeref:typename:time_t
operator -	proxy_workdir/taskd-1.1.0/src/Duration.cpp	/^Duration Duration::operator- (const Duration& other)$/;"	f	class:Duration	typeref:typename:Duration
operator --	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^void Date::operator-- ()$/;"	f	class:Date	typeref:typename:void
operator --	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^void Date::operator-- (int)$/;"	f	class:Date	typeref:typename:void
operator -=	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^Date& Date::operator-= (const int delta)$/;"	f	class:Date	typeref:typename:Date &
operator -=	proxy_workdir/taskd-1.1.0/src/Duration.cpp	/^Duration& Duration::operator-= (const Duration& other)$/;"	f	class:Duration	typeref:typename:Duration &
operator <	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^bool Date::operator<  (const Date& rhs) const$/;"	f	class:Date	typeref:typename:bool
operator <	proxy_workdir/taskd-1.1.0/src/Duration.cpp	/^bool Duration::operator< (const Duration& other)$/;"	f	class:Duration	typeref:typename:bool
operator <<	proxy_workdir/taskd-1.1.0/src/Path.cpp	/^std::ostream& operator<< (std::ostream& out, const Path& path)$/;"	f	typeref:typename:std::ostream &
operator <=	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^bool Date::operator<= (const Date& rhs) const$/;"	f	class:Date	typeref:typename:bool
operator <=	proxy_workdir/taskd-1.1.0/src/Duration.cpp	/^bool Duration::operator<= (const Duration& other)$/;"	f	class:Duration	typeref:typename:bool
operator =	proxy_workdir/taskd-1.1.0/src/Color.cpp	/^Color& Color::operator= (const Color& other)$/;"	f	class:Color	typeref:typename:Color &
operator =	proxy_workdir/taskd-1.1.0/src/ConfigFile.cpp	/^Config& Config::operator= (const Config& other)$/;"	f	class:Config	typeref:typename:Config &
operator =	proxy_workdir/taskd-1.1.0/src/Directory.cpp	/^Directory& Directory::operator= (const Directory& other)$/;"	f	class:Directory	typeref:typename:Directory &
operator =	proxy_workdir/taskd-1.1.0/src/Duration.cpp	/^Duration& Duration::operator= (const Duration& other)$/;"	f	class:Duration	typeref:typename:Duration &
operator =	proxy_workdir/taskd-1.1.0/src/File.cpp	/^File& File::operator= (const File& other)$/;"	f	class:File	typeref:typename:File &
operator =	proxy_workdir/taskd-1.1.0/src/Msg.cpp	/^Msg& Msg::operator= (const Msg& other)$/;"	f	class:Msg	typeref:typename:Msg &
operator =	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^Nibbler& Nibbler::operator= (const Nibbler& other)$/;"	f	class:Nibbler	typeref:typename:Nibbler &
operator =	proxy_workdir/taskd-1.1.0/src/Path.cpp	/^Path& Path::operator= (const Path& other)$/;"	f	class:Path	typeref:typename:Path &
operator =	proxy_workdir/taskd-1.1.0/src/RX.cpp	/^RX& RX::operator= (const RX& other)$/;"	f	class:RX	typeref:typename:RX &
operator =	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^Task& Task::operator= (const Task& other)$/;"	f	class:Task	typeref:typename:Task &
operator ==	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^bool Date::operator== (const Date& rhs) const$/;"	f	class:Date	typeref:typename:bool
operator ==	proxy_workdir/taskd-1.1.0/src/Msg.cpp	/^bool Msg::operator== (const Msg& other) const$/;"	f	class:Msg	typeref:typename:bool
operator ==	proxy_workdir/taskd-1.1.0/src/Path.cpp	/^bool Path::operator== (const Path& other)$/;"	f	class:Path	typeref:typename:bool
operator ==	proxy_workdir/taskd-1.1.0/src/RX.cpp	/^bool RX::operator== (const RX& other) const$/;"	f	class:RX	typeref:typename:bool
operator ==	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^bool Task::operator== (const Task& other)$/;"	f	class:Task	typeref:typename:bool
operator >	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^bool Date::operator>  (const Date& rhs) const$/;"	f	class:Date	typeref:typename:bool
operator >	proxy_workdir/taskd-1.1.0/src/Duration.cpp	/^bool Duration::operator> (const Duration& other)$/;"	f	class:Duration	typeref:typename:bool
operator >=	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^bool Date::operator>= (const Date& rhs) const$/;"	f	class:Date	typeref:typename:bool
operator >=	proxy_workdir/taskd-1.1.0/src/Duration.cpp	/^bool Duration::operator>= (const Duration& other)$/;"	f	class:Duration	typeref:typename:bool
parent	proxy_workdir/taskd-1.1.0/src/Path.cpp	/^std::string Path::parent () const$/;"	f	class:Path	typeref:typename:std::string
parse	proxy_workdir/taskd-1.1.0/src/ConfigFile.cpp	/^void Config::parse (const std::string& input, int nest \/* = 1 *\/)$/;"	f	class:Config	typeref:typename:void
parse	proxy_workdir/taskd-1.1.0/src/Duration.cpp	/^void Duration::parse (const std::string& input)$/;"	f	class:Duration	typeref:typename:void
parse	proxy_workdir/taskd-1.1.0/src/JSON.cpp	/^json::array* json::array::parse (Nibbler& nibbler)$/;"	f	class:json::array	typeref:typename:json::array *
parse	proxy_workdir/taskd-1.1.0/src/JSON.cpp	/^json::literal* json::literal::parse (Nibbler& nibbler)$/;"	f	class:json::literal	typeref:typename:json::literal *
parse	proxy_workdir/taskd-1.1.0/src/JSON.cpp	/^json::number* json::number::parse (Nibbler& nibbler)$/;"	f	class:json::number	typeref:typename:json::number *
parse	proxy_workdir/taskd-1.1.0/src/JSON.cpp	/^json::object* json::object::parse (Nibbler& nibbler)$/;"	f	class:json::object	typeref:typename:json::object *
parse	proxy_workdir/taskd-1.1.0/src/JSON.cpp	/^json::string* json::string::parse (Nibbler& nibbler)$/;"	f	class:json::string	typeref:typename:json::string *
parse	proxy_workdir/taskd-1.1.0/src/JSON.cpp	/^json::value* json::parse (const std::string& input)$/;"	f	class:json	typeref:typename:json::value *
parse	proxy_workdir/taskd-1.1.0/src/JSON.cpp	/^json::value* json::value::parse (Nibbler& nibbler)$/;"	f	class:json::value	typeref:typename:json::value *
parse	proxy_workdir/taskd-1.1.0/src/Msg.cpp	/^bool Msg::parse (const std::string& input)$/;"	f	class:Msg	typeref:typename:bool
parse	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^void Task::parse (const std::string& input)$/;"	f	class:Task	typeref:typename:void
parseDigits	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^bool Nibbler::parseDigits(std::string::size_type& i,$/;"	f	class:Nibbler	typeref:typename:bool
parseJSON	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^void Task::parseJSON (const std::string& line)$/;"	f	class:Task	typeref:typename:void
parseLegacy	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^void Task::parseLegacy (const std::string& line)$/;"	f	class:Task	typeref:typename:void
parse_pair	proxy_workdir/taskd-1.1.0/src/JSON.cpp	/^bool json::object::parse_pair ($/;"	f	class:json::object	typeref:typename:bool
parse_payload	proxy_workdir/taskd-1.1.0/src/daemon.cpp	/^void Daemon::parse_payload ($/;"	f	class:Daemon	typeref:typename:void
parser	proxy_workdir/taskd-1.1.0/scripts/l10n	/^  parser = argparse.ArgumentParser(description=usage)$/;"	v
parser	proxy_workdir/taskd-1.1.0/scripts/profile.py	/^  parser = argparse.ArgumentParser(description="Generate user profiles from server logs.")$/;"	v
patch	proxy_workdir/taskd-1.1.0/src/daemon.cpp	/^void Daemon::patch ($/;"	f	class:Daemon	typeref:typename:void
pending	proxy_workdir/taskd-1.1.0/src/Task.h	/^  enum status {pending, completed, deleted, recurring, waiting};$/;"	e	enum:Task::status
printable	proxy_workdir/taskd-1.1.0/src/text.cpp	/^std::string printable (char input)$/;"	f	typeref:typename:std::string
printable	proxy_workdir/taskd-1.1.0/src/text.cpp	/^std::string printable (const std::string& input)$/;"	f	typeref:typename:std::string
printable	proxy_workdir/taskd-1.1.0/src/tls/text.cpp	/^std::string printable (char input)$/;"	f	typeref:typename:std::string
printable	proxy_workdir/taskd-1.1.0/src/tls/text.cpp	/^std::string printable (const std::string& input)$/;"	f	typeref:typename:std::string
purge	Makefile	/^purge: stop$/;"	t
queue	proxy_workdir/taskd-1.1.0/src/TLSServer.cpp	/^void TLSServer::queue (int depth)$/;"	f	class:TLSServer	typeref:typename:void
queue	proxy_workdir/taskd-1.1.0/src/tls/TLSServer.cpp	/^void TLSServer::queue (int depth)$/;"	f	class:TLSServer	typeref:typename:void
quickstart	Makefile	/^quickstart:$/;"	t
read	proxy_workdir/taskd-1.1.0/src/File.cpp	/^bool File::read (const std::string& name, std::string& contents)$/;"	f	class:File	typeref:typename:bool
read	proxy_workdir/taskd-1.1.0/src/File.cpp	/^bool File::read (const std::string& name, std::vector <std::string>& contents)$/;"	f	class:File	typeref:typename:bool
read	proxy_workdir/taskd-1.1.0/src/File.cpp	/^std::string File::read (const std::string& name)$/;"	f	class:File	typeref:typename:std::string
read	proxy_workdir/taskd-1.1.0/src/File.cpp	/^void File::read (std::string& contents)$/;"	f	class:File	typeref:typename:void
read	proxy_workdir/taskd-1.1.0/src/File.cpp	/^void File::read (std::vector <std::string>& contents)$/;"	f	class:File	typeref:typename:void
read_file	proxy_workdir/taskd-1.1.0/scripts/l10n	/^def read_file(translations, file):$/;"	f
readable	proxy_workdir/taskd-1.1.0/src/Path.cpp	/^bool Path::readable () const$/;"	f	class:Path	typeref:typename:bool
recalc_urgency	proxy_workdir/taskd-1.1.0/src/Task.h	/^  bool recalc_urgency;$/;"	m	class:Task	typeref:typename:bool
recurring	proxy_workdir/taskd-1.1.0/src/Task.h	/^  enum status {pending, completed, deleted, recurring, waiting};$/;"	e	enum:Task::status
recv	proxy_workdir/taskd-1.1.0/src/TLSClient.cpp	/^void TLSClient::recv (std::string& data)$/;"	f	class:TLSClient	typeref:typename:void
recv	proxy_workdir/taskd-1.1.0/src/TLSServer.cpp	/^void TLSTransaction::recv (std::string& data)$/;"	f	class:TLSTransaction	typeref:typename:void
recv	proxy_workdir/taskd-1.1.0/src/tls/TLSClient.cpp	/^void TLSClient::recv (std::string& data)$/;"	f	class:TLSClient	typeref:typename:void
recv	proxy_workdir/taskd-1.1.0/src/tls/TLSServer.cpp	/^void TLSTransaction::recv (std::string& data)$/;"	f	class:TLSTransaction	typeref:typename:void
red	proxy_workdir/taskd-1.1.0/src/Color.h	/^  enum color_id {nocolor = 0, black, red, green, yellow, blue, magenta, cyan, white};$/;"	e	enum:Color::color_id
redirect	proxy_workdir/taskd-1.1.0/src/Database.cpp	/^bool Database::redirect (const std::string& org, Msg& response)$/;"	f	class:Database	typeref:typename:bool
regex	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^bool Task::regex                  = false;$/;"	m	class:Task	typeref:typename:bool
regex	proxy_workdir/taskd-1.1.0/src/Task.h	/^  static bool regex;$/;"	m	class:Task	typeref:typename:bool
relatives	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^static const char* relatives[] =$/;"	v	typeref:typename:const char * []	file:
release	Makefile	/^release: build tag_latest$/;"	t
remove	proxy_workdir/taskd-1.1.0/src/Directory.cpp	/^bool Directory::remove () const$/;"	f	class:Directory	typeref:typename:bool
remove	proxy_workdir/taskd-1.1.0/src/File.cpp	/^bool File::remove () const$/;"	f	class:File	typeref:typename:bool
remove	proxy_workdir/taskd-1.1.0/src/File.cpp	/^bool File::remove (const std::string& name)$/;"	f	class:File	typeref:typename:bool
remove	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^void Task::remove (const std::string& name)$/;"	f	class:Task	typeref:typename:void
removeAnnotations	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^void Task::removeAnnotations ()$/;"	f	class:Task	typeref:typename:void
removeDependency	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^void Task::removeDependency (const std::string& uuid)$/;"	f	class:Task	typeref:typename:void
removeDependency	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^void Task::removeDependency (int id)$/;"	f	class:Task	typeref:typename:void
removePidFile	proxy_workdir/taskd-1.1.0/src/Server.cpp	/^void Server::removePidFile ()$/;"	f	class:Server	typeref:typename:void
removeTag	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^void Task::removeTag (const std::string& tag)$/;"	f	class:Task	typeref:typename:void
remove_directory	proxy_workdir/taskd-1.1.0/src/Directory.cpp	/^bool Directory::remove_directory (const std::string& dir) const$/;"	f	class:Directory	typeref:typename:bool
remove_group	proxy_workdir/taskd-1.1.0/src/Database.cpp	/^bool Database::remove_group ($/;"	f	class:Database	typeref:typename:bool
remove_org	proxy_workdir/taskd-1.1.0/src/Database.cpp	/^bool Database::remove_org (const std::string& org)$/;"	f	class:Database	typeref:typename:bool
remove_user	proxy_workdir/taskd-1.1.0/src/Database.cpp	/^bool Database::remove_user ($/;"	f	class:Database	typeref:typename:bool
rename	proxy_workdir/taskd-1.1.0/src/Path.cpp	/^bool Path::rename (const std::string& new_name)$/;"	f	class:Path	typeref:typename:bool
replace_positional	proxy_workdir/taskd-1.1.0/src/text.cpp	/^static void replace_positional ($/;"	f	typeref:typename:void	file:
replace_positional	proxy_workdir/taskd-1.1.0/src/tls/text.cpp	/^static void replace_positional ($/;"	f	typeref:typename:void	file:
reset	proxy_workdir/taskd-1.1.0/src/Log.cpp	/^void Log::reset ()$/;"	f	class:Log	typeref:typename:void
restore	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^std::string::size_type Nibbler::restore ()$/;"	f	class:Nibbler	typeref:typename:std::string::size_type
resume	proxy_workdir/taskd-1.1.0/src/Database.cpp	/^bool Database::resume (const Directory& node)$/;"	f	class:Database	typeref:typename:bool
rightJustify	proxy_workdir/taskd-1.1.0/src/text.cpp	/^std::string rightJustify (const int input, const int width)$/;"	f	typeref:typename:std::string
rightJustify	proxy_workdir/taskd-1.1.0/src/text.cpp	/^std::string rightJustify (const std::string& input, const int width)$/;"	f	typeref:typename:std::string
rightJustify	proxy_workdir/taskd-1.1.0/src/tls/text.cpp	/^std::string rightJustify (const int input, const int width)$/;"	f	typeref:typename:std::string
rightJustifyZero	proxy_workdir/taskd-1.1.0/src/text.cpp	/^std::string rightJustifyZero (const int input, const int width)$/;"	f	typeref:typename:std::string
rightJustifyZero	proxy_workdir/taskd-1.1.0/src/tls/text.cpp	/^std::string rightJustifyZero (const int input, const int width)$/;"	f	typeref:typename:std::string
s	proxy_workdir/taskd-1.1.0/src/Duration.cpp	/^  std::stringstream s;$/;"	v	typeref:typename:std::stringstream
sameDay	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^bool Date::sameDay (const Date& rhs) const$/;"	f	class:Date	typeref:typename:bool
sameHour	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^bool Date::sameHour (const Date& rhs) const$/;"	f	class:Date	typeref:typename:bool
sameMonth	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^bool Date::sameMonth (const Date& rhs) const$/;"	f	class:Date	typeref:typename:bool
sameWeek	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^bool Date::sameWeek (const Date& rhs) const$/;"	f	class:Date	typeref:typename:bool
sameYear	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^bool Date::sameYear (const Date& rhs) const$/;"	f	class:Date	typeref:typename:bool
save	proxy_workdir/taskd-1.1.0/src/ConfigFile.cpp	/^void Config::save ()$/;"	f	class:Config	typeref:typename:void
save	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^std::string::size_type Nibbler::save ()$/;"	f	class:Nibbler	typeref:typename:std::string::size_type
scan_log	proxy_workdir/taskd-1.1.0/scripts/profile.py	/^def scan_log(file, data):$/;"	f
scan_root	proxy_workdir/taskd-1.1.0/scripts/profile.py	/^def scan_root(root, data):$/;"	f
searchCaseSensitive	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^bool Task::searchCaseSensitive    = true;$/;"	m	class:Task	typeref:typename:bool
searchCaseSensitive	proxy_workdir/taskd-1.1.0/src/Task.h	/^  static bool searchCaseSensitive;$/;"	m	class:Task	typeref:typename:bool
second	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^int Date::second () const$/;"	f	class:Date	typeref:typename:int
send	proxy_workdir/taskd-1.1.0/src/TLSClient.cpp	/^void TLSClient::send (const std::string& data)$/;"	f	class:TLSClient	typeref:typename:void
send	proxy_workdir/taskd-1.1.0/src/TLSServer.cpp	/^void TLSTransaction::send (const std::string& data)$/;"	f	class:TLSTransaction	typeref:typename:void
send	proxy_workdir/taskd-1.1.0/src/tls/TLSClient.cpp	/^void TLSClient::send (const std::string& data)$/;"	f	class:TLSClient	typeref:typename:void
send	proxy_workdir/taskd-1.1.0/src/tls/TLSServer.cpp	/^void TLSTransaction::send (const std::string& data)$/;"	f	class:TLSTransaction	typeref:typename:void
serialize	proxy_workdir/taskd-1.1.0/src/Msg.cpp	/^std::string Msg::serialize () const$/;"	f	class:Msg	typeref:typename:std::string
set	proxy_workdir/taskd-1.1.0/src/ConfigFile.cpp	/^void Config::set (const std::string& key, const double value)$/;"	f	class:Config	typeref:typename:void
set	proxy_workdir/taskd-1.1.0/src/ConfigFile.cpp	/^void Config::set (const std::string& key, const int value)$/;"	f	class:Config	typeref:typename:void
set	proxy_workdir/taskd-1.1.0/src/ConfigFile.cpp	/^void Config::set (const std::string& key, const std::string& value)$/;"	f	class:Config	typeref:typename:void
set	proxy_workdir/taskd-1.1.0/src/Msg.cpp	/^void Msg::set (const std::string& name, const double value)$/;"	f	class:Msg	typeref:typename:void
set	proxy_workdir/taskd-1.1.0/src/Msg.cpp	/^void Msg::set (const std::string& name, const int value)$/;"	f	class:Msg	typeref:typename:void
set	proxy_workdir/taskd-1.1.0/src/Msg.cpp	/^void Msg::set (const std::string& name, const std::string& value)$/;"	f	class:Msg	typeref:typename:void
set	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^void Task::set (const std::string& name, const std::string& value)$/;"	f	class:Task	typeref:typename:void
set	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^void Task::set (const std::string& name, int value)$/;"	f	class:Task	typeref:typename:void
setAnnotations	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^void Task::setAnnotations (const std::map <std::string, std::string>& annotations)$/;"	f	class:Task	typeref:typename:void
setCAFile	proxy_workdir/taskd-1.1.0/src/Server.cpp	/^void Server::setCAFile (const std::string& file)$/;"	f	class:Server	typeref:typename:void
setCRLFile	proxy_workdir/taskd-1.1.0/src/Server.cpp	/^void Server::setCRLFile (const std::string& file)$/;"	f	class:Server	typeref:typename:void
setCertFile	proxy_workdir/taskd-1.1.0/src/Server.cpp	/^void Server::setCertFile (const std::string& file)$/;"	f	class:Server	typeref:typename:void
setConfig	proxy_workdir/taskd-1.1.0/src/Server.cpp	/^void Server::setConfig (Config* c)$/;"	f	class:Server	typeref:typename:void
setDaemon	proxy_workdir/taskd-1.1.0/src/Server.cpp	/^void Server::setDaemon ()$/;"	f	class:Server	typeref:typename:void
setEnd	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^void Task::setEnd ()$/;"	f	class:Task	typeref:typename:void
setEntry	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^void Task::setEntry ()$/;"	f	class:Task	typeref:typename:void
setFamily	proxy_workdir/taskd-1.1.0/src/Server.cpp	/^void Server::setFamily (const std::string& family)$/;"	f	class:Server	typeref:typename:void
setFile	proxy_workdir/taskd-1.1.0/src/Log.cpp	/^void Log::setFile (const std::string& path)$/;"	f	class:Log	typeref:typename:void
setHost	proxy_workdir/taskd-1.1.0/src/Server.cpp	/^void Server::setHost (const std::string& host)$/;"	f	class:Server	typeref:typename:void
setIfBlank	proxy_workdir/taskd-1.1.0/src/ConfigFile.cpp	/^void Config::setIfBlank (const std::string& key, const std::string& value)$/;"	f	class:Config	typeref:typename:void
setKeyFile	proxy_workdir/taskd-1.1.0/src/Server.cpp	/^void Server::setKeyFile (const std::string& file)$/;"	f	class:Server	typeref:typename:void
setLimit	proxy_workdir/taskd-1.1.0/src/Server.cpp	/^void Server::setLimit (int max)$/;"	f	class:Server	typeref:typename:void
setLog	proxy_workdir/taskd-1.1.0/src/Database.cpp	/^void Database::setLog (Log* l)$/;"	f	class:Database	typeref:typename:void
setLog	proxy_workdir/taskd-1.1.0/src/Server.cpp	/^void Server::setLog (Log* l)$/;"	f	class:Server	typeref:typename:void
setLogClients	proxy_workdir/taskd-1.1.0/src/Server.cpp	/^void Server::setLogClients (bool value)$/;"	f	class:Server	typeref:typename:void
setModified	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^void Task::setModified ()$/;"	f	class:Task	typeref:typename:void
setPayload	proxy_workdir/taskd-1.1.0/src/Msg.cpp	/^void Msg::setPayload (const std::string& payload)$/;"	f	class:Msg	typeref:typename:void
setPidFile	proxy_workdir/taskd-1.1.0/src/Server.cpp	/^void Server::setPidFile (const std::string& file)$/;"	f	class:Server	typeref:typename:void
setPoolSize	proxy_workdir/taskd-1.1.0/src/Server.cpp	/^void Server::setPoolSize (int size)$/;"	f	class:Server	typeref:typename:void
setPort	proxy_workdir/taskd-1.1.0/src/Server.cpp	/^void Server::setPort (const std::string& port)$/;"	f	class:Server	typeref:typename:void
setQueueSize	proxy_workdir/taskd-1.1.0/src/Server.cpp	/^void Server::setQueueSize (int size)$/;"	f	class:Server	typeref:typename:void
setStart	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^void Task::setStart ()$/;"	f	class:Task	typeref:typename:void
setStatus	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^void Task::setStatus (Task::status status)$/;"	f	class:Task	typeref:typename:void
show_profile	proxy_workdir/taskd-1.1.0/scripts/profile.py	/^def show_profile(root, data):$/;"	f
signal_handler	proxy_workdir/taskd-1.1.0/src/Server.cpp	/^static void signal_handler (int s)$/;"	f	typeref:typename:void	file:
size	proxy_workdir/taskd-1.1.0/src/File.cpp	/^size_t File::size () const$/;"	f	class:File	typeref:typename:size_t
skip	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^bool Nibbler::skip (char c)$/;"	f	class:Nibbler	typeref:typename:bool
skipAll	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^bool Nibbler::skipAll (char c)$/;"	f	class:Nibbler	typeref:typename:bool
skipAllOneOf	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^bool Nibbler::skipAllOneOf (const std::string& chars)$/;"	f	class:Nibbler	typeref:typename:bool
skipN	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^bool Nibbler::skipN (const int quantity \/* = 1 *\/)$/;"	f	class:Nibbler	typeref:typename:bool
skipRx	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^bool Nibbler::skipRx (const std::string& regex)$/;"	f	class:Nibbler	typeref:typename:bool
skipWS	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^bool Nibbler::skipWS ()$/;"	f	class:Nibbler	typeref:typename:bool
split	proxy_workdir/taskd-1.1.0/src/text.cpp	/^void split ($/;"	f	typeref:typename:void
split	proxy_workdir/taskd-1.1.0/src/tls/text.cpp	/^void split ($/;"	f	typeref:typename:void
split_minimal	proxy_workdir/taskd-1.1.0/src/text.cpp	/^void split_minimal ($/;"	f	typeref:typename:void
split_minimal	proxy_workdir/taskd-1.1.0/src/tls/text.cpp	/^void split_minimal ($/;"	f	typeref:typename:void
start	proxy_workdir/taskd-1.1.0/src/Timer.cpp	/^void HighResTimer::start ()$/;"	f	class:HighResTimer	typeref:typename:void
start	proxy_workdir/taskd-1.1.0/src/Timer.cpp	/^void Timer::start ()$/;"	f	class:Timer	typeref:typename:void
startOfDay	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^Date Date::startOfDay () const$/;"	f	class:Date	typeref:typename:Date
startOfMonth	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^Date Date::startOfMonth () const$/;"	f	class:Date	typeref:typename:Date
startOfWeek	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^Date Date::startOfWeek () const$/;"	f	class:Date	typeref:typename:Date
startOfYear	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^Date Date::startOfYear () const$/;"	f	class:Date	typeref:typename:Date
stats	proxy_workdir/taskd-1.1.0/src/Server.cpp	/^void Server::stats (int& requests, time_t& uptime, double& utilization)$/;"	f	class:Server	typeref:typename:void
status	proxy_workdir/taskd-1.1.0/src/Task.h	/^  enum status {pending, completed, deleted, recurring, waiting};$/;"	g	class:Task
statusToText	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^std::string Task::statusToText (Task::status s)$/;"	f	class:Task	typeref:typename:std::string
status_statistics	proxy_workdir/taskd-1.1.0/src/status.cpp	/^int status_statistics (Config& config)$/;"	f	typeref:typename:int
stop	Makefile	/^stop:$/;"	t
stop	proxy_workdir/taskd-1.1.0/src/Timer.cpp	/^void HighResTimer::stop ()$/;"	f	class:HighResTimer	typeref:typename:void
stop	proxy_workdir/taskd-1.1.0/src/Timer.cpp	/^void Timer::stop ()$/;"	f	class:Timer	typeref:typename:void
str	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^const std::string& Nibbler::str () const$/;"	f	class:Nibbler	typeref:typename:const std::string &
str_replace	proxy_workdir/taskd-1.1.0/src/text.cpp	/^const std::string str_replace ($/;"	f	typeref:typename:const std::string
str_replace	proxy_workdir/taskd-1.1.0/src/tls/text.cpp	/^const std::string str_replace ($/;"	f	typeref:typename:const std::string
strict	proxy_workdir/taskd-1.1.0/src/TLSClient.h	/^  enum trust_level { strict, ignore_hostname, allow_all };$/;"	e	enum:TLSClient::trust_level
strict	proxy_workdir/taskd-1.1.0/src/TLSServer.h	/^  enum trust_level { strict, allow_all };$/;"	e	enum:TLSServer::trust_level
strict	proxy_workdir/taskd-1.1.0/src/tls/TLSClient.h	/^  enum trust_level { strict, ignore_hostname, allow_all };$/;"	e	enum:TLSClient::trust_level
strict	proxy_workdir/taskd-1.1.0/src/tls/TLSServer.h	/^  enum trust_level { strict, allow_all };$/;"	e	enum:TLSServer::trust_level
string	proxy_workdir/taskd-1.1.0/src/JSON.cpp	/^json::string::string (const std::string& other)$/;"	f	class:json::string
string	proxy_workdir/taskd-1.1.0/src/JSON.h	/^    string () {}$/;"	f	class:json::string
string	proxy_workdir/taskd-1.1.0/src/JSON.h	/^  class string : public value$/;"	c	namespace:json
strip	proxy_workdir/taskd-1.1.0/src/Color.cpp	/^std::string Color::strip (const std::string& input)$/;"	f	class:Color	typeref:typename:std::string
subst_penalty	proxy_workdir/taskd-1.1.0/src/text.cpp	/^const int subst_penalty  = 1;$/;"	v	typeref:typename:const int
substitute	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^void Task::substitute ($/;"	f	class:Task	typeref:typename:void
subtract	proxy_workdir/taskd-1.1.0/src/Timer.cpp	/^void Timer::subtract (unsigned long value)$/;"	f	class:Timer	typeref:typename:void
suspend	proxy_workdir/taskd-1.1.0/src/Database.cpp	/^bool Database::suspend (const Directory& node)$/;"	f	class:Database	typeref:typename:bool
swap_penalty	proxy_workdir/taskd-1.1.0/src/text.cpp	/^const int swap_penalty   = 1;$/;"	v	typeref:typename:const int
sync1	proxy_workdir/taskd-1.1.0/scripts/profile.py	/^sync1           = re.compile("\\'sync\\' from ([^\/]+)\/(.+) at")$/;"	v
sync2	proxy_workdir/taskd-1.1.0/scripts/profile.py	/^sync2           = re.compile("\\'sync\\' from '([^\/]+)\/(.+)' using '([^']+)' at")$/;"	v
sync_nontrivial	proxy_workdir/taskd-1.1.0/scripts/profile.py	/^sync_nontrivial = re.compile('New sync key')$/;"	v
sync_trivial	proxy_workdir/taskd-1.1.0/scripts/profile.py	/^sync_trivial    = re.compile('still valid')$/;"	v
tag_latest	Makefile	/^tag_latest:$/;"	t
taskd	proxy_workdir/taskd-1.1.0/CMakeLists.txt	/^project (taskd)$/;"	p
taskd	proxy_workdir/taskd-1.1.0/doc/man/taskd.1	/^.TH taskd 1 2015-05-10 "taskd 1.1.0" "User Manuals"$/;"	t
taskd	proxy_workdir/taskd-1.1.0/doc/man/taskd.1.in	/^.TH taskd 1 2015-05-10 "${PACKAGE_STRING}" "User Manuals"$/;"	t
taskd	proxy_workdir/taskd-1.1.0/doc/man/taskdrc.5	/^.TH taskd 5 2015-05-10 "taskd 1.1.0" "User Manuals"$/;"	t
taskd	proxy_workdir/taskd-1.1.0/doc/man/taskdrc.5.in	/^.TH taskd 5 2015-05-10 "${PACKAGE_STRING}" "User Manuals"$/;"	t
taskd_applyOverride	proxy_workdir/taskd-1.1.0/src/api.cpp	/^bool taskd_applyOverride (Config& config, const std::string& arg)$/;"	f	typeref:typename:bool
taskd_at_least	proxy_workdir/taskd-1.1.0/src/api.cpp	/^bool taskd_at_least (const std::string& left, const std::string& right)$/;"	f	typeref:typename:bool
taskd_createDirectory	proxy_workdir/taskd-1.1.0/src/api.cpp	/^bool taskd_createDirectory (Directory& d, bool verbose)$/;"	f	typeref:typename:bool
taskd_error	proxy_workdir/taskd-1.1.0/src/api.cpp	/^std::string taskd_error (const int code)$/;"	f	typeref:typename:std::string
taskd_executable	proxy_workdir/taskd-1.1.0/src/CMakeLists.txt	/^add_executable (taskd_executable taskd.cpp$/;"	t
taskd_is_group	proxy_workdir/taskd-1.1.0/src/api.cpp	/^bool taskd_is_group ($/;"	f	typeref:typename:bool
taskd_is_org	proxy_workdir/taskd-1.1.0/src/api.cpp	/^bool taskd_is_org ($/;"	f	typeref:typename:bool
taskd_is_user	proxy_workdir/taskd-1.1.0/src/api.cpp	/^bool taskd_is_user ($/;"	f	typeref:typename:bool
taskd_renderMap	proxy_workdir/taskd-1.1.0/src/api.cpp	/^void taskd_renderMap ($/;"	f	typeref:typename:void
taskd_requireHeader	proxy_workdir/taskd-1.1.0/src/api.cpp	/^void taskd_requireHeader ($/;"	f	typeref:typename:void
taskd_requireSetting	proxy_workdir/taskd-1.1.0/src/api.cpp	/^void taskd_requireSetting (Config& config, const std::string& name)$/;"	f	typeref:typename:void
taskd_requireVersion	proxy_workdir/taskd-1.1.0/src/api.cpp	/^void taskd_requireVersion (const Msg& message, const std::string& version)$/;"	f	typeref:typename:void
taskd_sendMessage	proxy_workdir/taskd-1.1.0/src/api.cpp	/^bool taskd_sendMessage ($/;"	f	typeref:typename:bool
taskd_staticInitialize	proxy_workdir/taskd-1.1.0/src/api.cpp	/^void taskd_staticInitialize ()$/;"	f	typeref:typename:void
taskdctl	proxy_workdir/taskd-1.1.0/doc/man/taskdctl.1	/^.TH taskdctl 1 2015-05-10 "taskd 1.1.0" "User Manuals"$/;"	t
taskdctl	proxy_workdir/taskd-1.1.0/doc/man/taskdctl.1.in	/^.TH taskdctl 1 2015-05-10 "${PACKAGE_STRING}" "User Manuals"$/;"	t
textToStatus	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^Task::status Task::textToStatus (const std::string& input)$/;"	f	class:Task	typeref:typename:Task::status
timegm	proxy_workdir/taskd-1.1.0/src/util.cpp	/^time_t timegm (struct tm *tm)$/;"	f	typeref:typename:time_t
timestamp	proxy_workdir/taskd-1.1.0/scripts/profile.py	/^timestamp       = re.compile('^(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2})')                    /;"	v
timestamp	proxy_workdir/taskd-1.1.0/src/Log.cpp	/^void Log::timestamp ()$/;"	f	class:Log	typeref:typename:void
toEpoch	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^time_t Date::toEpoch ()$/;"	f	class:Date	typeref:typename:time_t
toEpoch	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^void Date::toEpoch (time_t& epoch)$/;"	f	class:Date	typeref:typename:void
toEpochString	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^std::string Date::toEpochString ()$/;"	f	class:Date	typeref:typename:std::string
toISO	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^std::string Date::toISO ()$/;"	f	class:Date	typeref:typename:std::string
toJulian	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^double Date::toJulian ()$/;"	f	class:Date	typeref:typename:double
toMDY	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^void Date::toMDY (int& m, int& d, int& y)$/;"	f	class:Date	typeref:typename:void
toString	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^const std::string Date::toString ($/;"	f	class:Date	typeref:typename:const std::string
total	proxy_workdir/taskd-1.1.0/src/Timer.cpp	/^double HighResTimer::total () const$/;"	f	class:HighResTimer	typeref:typename:double
total	proxy_workdir/taskd-1.1.0/src/Timer.cpp	/^unsigned long Timer::total () const$/;"	f	class:Timer	typeref:typename:unsigned long
trim	proxy_workdir/taskd-1.1.0/src/text.cpp	/^std::string trim (const std::string& in, const std::string& t \/*= " "*\/)$/;"	f	typeref:typename:std::string
trim	proxy_workdir/taskd-1.1.0/src/tls/text.cpp	/^std::string trim (const std::string& in, const std::string& t \/*= " "*\/)$/;"	f	typeref:typename:std::string
trimLeft	proxy_workdir/taskd-1.1.0/src/text.cpp	/^std::string trimLeft (const std::string& in, const std::string& t \/*= " "*\/)$/;"	f	typeref:typename:std::string
trimLeft	proxy_workdir/taskd-1.1.0/src/tls/text.cpp	/^std::string trimLeft (const std::string& in, const std::string& t \/*= " "*\/)$/;"	f	typeref:typename:std::string
trimRight	proxy_workdir/taskd-1.1.0/src/text.cpp	/^std::string trimRight (const std::string& in, const std::string& t \/*= " "*\/)$/;"	f	typeref:typename:std::string
trimRight	proxy_workdir/taskd-1.1.0/src/tls/text.cpp	/^std::string trimRight (const std::string& in, const std::string& t \/*= " "*\/)$/;"	f	typeref:typename:std::string
truevalue	proxy_workdir/taskd-1.1.0/src/JSON.h	/^    enum literal_value {none, nullvalue, falsevalue, truevalue};$/;"	e	enum:json::literal::literal_value
truncate	proxy_workdir/taskd-1.1.0/src/File.cpp	/^void File::truncate ()$/;"	f	class:File	typeref:typename:void
trust	proxy_workdir/taskd-1.1.0/src/TLSClient.cpp	/^void TLSClient::trust (const enum trust_level value)$/;"	f	class:TLSClient	typeref:typename:void
trust	proxy_workdir/taskd-1.1.0/src/TLSServer.cpp	/^enum TLSServer::trust_level TLSServer::trust () const$/;"	f	class:TLSServer	typeref:enum:TLSServer::trust_level
trust	proxy_workdir/taskd-1.1.0/src/TLSServer.cpp	/^void TLSServer::trust (const enum trust_level value)$/;"	f	class:TLSServer	typeref:typename:void
trust	proxy_workdir/taskd-1.1.0/src/TLSServer.cpp	/^void TLSTransaction::trust (const enum TLSServer::trust_level value)$/;"	f	class:TLSTransaction	typeref:typename:void
trust	proxy_workdir/taskd-1.1.0/src/tls/TLSClient.cpp	/^void TLSClient::trust (const enum trust_level value)$/;"	f	class:TLSClient	typeref:typename:void
trust	proxy_workdir/taskd-1.1.0/src/tls/TLSServer.cpp	/^enum TLSServer::trust_level TLSServer::trust () const$/;"	f	class:TLSServer	typeref:enum:TLSServer::trust_level
trust	proxy_workdir/taskd-1.1.0/src/tls/TLSServer.cpp	/^void TLSServer::trust (const enum trust_level value)$/;"	f	class:TLSServer	typeref:typename:void
trust	proxy_workdir/taskd-1.1.0/src/tls/TLSServer.cpp	/^void TLSTransaction::trust (const enum TLSServer::trust_level value)$/;"	f	class:TLSTransaction	typeref:typename:void
trust_level	proxy_workdir/taskd-1.1.0/src/TLSClient.h	/^  enum trust_level { strict, ignore_hostname, allow_all };$/;"	g	class:TLSClient
trust_level	proxy_workdir/taskd-1.1.0/src/TLSServer.h	/^  enum trust_level { strict, allow_all };$/;"	g	class:TLSServer
trust_level	proxy_workdir/taskd-1.1.0/src/tls/TLSClient.h	/^  enum trust_level { strict, ignore_hostname, allow_all };$/;"	g	class:TLSClient
trust_level	proxy_workdir/taskd-1.1.0/src/tls/TLSServer.h	/^  enum trust_level { strict, allow_all };$/;"	g	class:TLSServer
type	proxy_workdir/taskd-1.1.0/src/JSON.cpp	/^json::jtype json::array::type ()$/;"	f	class:json::array	typeref:typename:json::jtype
type	proxy_workdir/taskd-1.1.0/src/JSON.cpp	/^json::jtype json::literal::type ()$/;"	f	class:json::literal	typeref:typename:json::jtype
type	proxy_workdir/taskd-1.1.0/src/JSON.cpp	/^json::jtype json::number::type ()$/;"	f	class:json::number	typeref:typename:json::jtype
type	proxy_workdir/taskd-1.1.0/src/JSON.cpp	/^json::jtype json::object::type ()$/;"	f	class:json::object	typeref:typename:json::jtype
type	proxy_workdir/taskd-1.1.0/src/JSON.cpp	/^json::jtype json::string::type ()$/;"	f	class:json::string	typeref:typename:json::jtype
type	proxy_workdir/taskd-1.1.0/src/JSON.cpp	/^json::jtype json::value::type ()$/;"	f	class:json::value	typeref:typename:json::jtype
ucFirst	proxy_workdir/taskd-1.1.0/src/text.cpp	/^std::string ucFirst (const std::string& input)$/;"	f	typeref:typename:std::string
ucFirst	proxy_workdir/taskd-1.1.0/src/tls/text.cpp	/^std::string ucFirst (const std::string& input)$/;"	f	typeref:typename:std::string
unlock	proxy_workdir/taskd-1.1.0/src/File.cpp	/^void File::unlock ()$/;"	f	class:File	typeref:typename:void
unquoteText	proxy_workdir/taskd-1.1.0/src/text.cpp	/^std::string unquoteText (const std::string& input)$/;"	f	typeref:typename:std::string
unquoteText	proxy_workdir/taskd-1.1.0/src/tls/text.cpp	/^std::string unquoteText (const std::string& input)$/;"	f	typeref:typename:std::string
up	proxy_workdir/taskd-1.1.0/src/Directory.cpp	/^bool Directory::up ()$/;"	f	class:Directory	typeref:typename:bool
upgrade	proxy_workdir/taskd-1.1.0/src/Color.cpp	/^void Color::upgrade ()$/;"	f	class:Color	typeref:typename:void
upgradeLegacyValues	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^void Task::upgradeLegacyValues ()$/;"	f	class:Task	typeref:typename:void
upperCase	proxy_workdir/taskd-1.1.0/src/text.cpp	/^std::string upperCase (const std::string& input)$/;"	f	typeref:typename:std::string
upperCase	proxy_workdir/taskd-1.1.0/src/tls/text.cpp	/^std::string upperCase (const std::string& input)$/;"	f	typeref:typename:std::string
urgency	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^float Task::urgency ()$/;"	f	class:Task	typeref:typename:float
urgencyActiveCoefficient	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^float Task::urgencyActiveCoefficient      = 0.0;$/;"	m	class:Task	typeref:typename:float
urgencyActiveCoefficient	proxy_workdir/taskd-1.1.0/src/Task.h	/^  static float urgencyActiveCoefficient;$/;"	m	class:Task	typeref:typename:float
urgencyAgeCoefficient	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^float Task::urgencyAgeCoefficient         = 0.0;$/;"	m	class:Task	typeref:typename:float
urgencyAgeCoefficient	proxy_workdir/taskd-1.1.0/src/Task.h	/^  static float urgencyAgeCoefficient;$/;"	m	class:Task	typeref:typename:float
urgencyAgeMax	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^float Task::urgencyAgeMax                 = 0.0;$/;"	m	class:Task	typeref:typename:float
urgencyAgeMax	proxy_workdir/taskd-1.1.0/src/Task.h	/^  static float urgencyAgeMax;$/;"	m	class:Task	typeref:typename:float
urgencyAnnotationsCoefficient	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^float Task::urgencyAnnotationsCoefficient = 0.0;$/;"	m	class:Task	typeref:typename:float
urgencyAnnotationsCoefficient	proxy_workdir/taskd-1.1.0/src/Task.h	/^  static float urgencyAnnotationsCoefficient;$/;"	m	class:Task	typeref:typename:float
urgencyBlockedCoefficient	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^float Task::urgencyBlockedCoefficient     = 0.0;$/;"	m	class:Task	typeref:typename:float
urgencyBlockedCoefficient	proxy_workdir/taskd-1.1.0/src/Task.h	/^  static float urgencyBlockedCoefficient;$/;"	m	class:Task	typeref:typename:float
urgencyBlockingCoefficient	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^float Task::urgencyBlockingCoefficient    = 0.0;$/;"	m	class:Task	typeref:typename:float
urgencyBlockingCoefficient	proxy_workdir/taskd-1.1.0/src/Task.h	/^  static float urgencyBlockingCoefficient;$/;"	m	class:Task	typeref:typename:float
urgencyDueCoefficient	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^float Task::urgencyDueCoefficient         = 0.0;$/;"	m	class:Task	typeref:typename:float
urgencyDueCoefficient	proxy_workdir/taskd-1.1.0/src/Task.h	/^  static float urgencyDueCoefficient;$/;"	m	class:Task	typeref:typename:float
urgencyNextCoefficient	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^float Task::urgencyNextCoefficient        = 0.0;$/;"	m	class:Task	typeref:typename:float
urgencyNextCoefficient	proxy_workdir/taskd-1.1.0/src/Task.h	/^  static float urgencyNextCoefficient;$/;"	m	class:Task	typeref:typename:float
urgencyProjectCoefficient	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^float Task::urgencyProjectCoefficient     = 0.0;$/;"	m	class:Task	typeref:typename:float
urgencyProjectCoefficient	proxy_workdir/taskd-1.1.0/src/Task.h	/^  static float urgencyProjectCoefficient;$/;"	m	class:Task	typeref:typename:float
urgencyScheduledCoefficient	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^float Task::urgencyScheduledCoefficient   = 0.0;$/;"	m	class:Task	typeref:typename:float
urgencyScheduledCoefficient	proxy_workdir/taskd-1.1.0/src/Task.h	/^  static float urgencyScheduledCoefficient;$/;"	m	class:Task	typeref:typename:float
urgencyTagsCoefficient	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^float Task::urgencyTagsCoefficient        = 0.0;$/;"	m	class:Task	typeref:typename:float
urgencyTagsCoefficient	proxy_workdir/taskd-1.1.0/src/Task.h	/^  static float urgencyTagsCoefficient;$/;"	m	class:Task	typeref:typename:float
urgencyWaitingCoefficient	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^float Task::urgencyWaitingCoefficient     = 0.0;$/;"	m	class:Task	typeref:typename:float
urgencyWaitingCoefficient	proxy_workdir/taskd-1.1.0/src/Task.h	/^  static float urgencyWaitingCoefficient;$/;"	m	class:Task	typeref:typename:float
urgency_active	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^float Task::urgency_active () const$/;"	f	class:Task	typeref:typename:float
urgency_age	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^float Task::urgency_age () const$/;"	f	class:Task	typeref:typename:float
urgency_annotations	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^float Task::urgency_annotations () const$/;"	f	class:Task	typeref:typename:float
urgency_blocked	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^float Task::urgency_blocked () const$/;"	f	class:Task	typeref:typename:float
urgency_blocking	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^float Task::urgency_blocking () const$/;"	f	class:Task	typeref:typename:float
urgency_c	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^float Task::urgency_c () const$/;"	f	class:Task	typeref:typename:float
urgency_due	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^float Task::urgency_due () const$/;"	f	class:Task	typeref:typename:float
urgency_next	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^float Task::urgency_next () const$/;"	f	class:Task	typeref:typename:float
urgency_project	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^float Task::urgency_project () const$/;"	f	class:Task	typeref:typename:float
urgency_scheduled	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^float Task::urgency_scheduled () const$/;"	f	class:Task	typeref:typename:float
urgency_tags	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^float Task::urgency_tags () const$/;"	f	class:Task	typeref:typename:float
urgency_value	proxy_workdir/taskd-1.1.0/src/Task.h	/^  float urgency_value;$/;"	m	class:Task	typeref:typename:float
urgency_waiting	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^float Task::urgency_waiting () const$/;"	f	class:Task	typeref:typename:float
usage	proxy_workdir/taskd-1.1.0/scripts/l10n	/^  usage="""Utility for checking localized string status across translations."""$/;"	v
used_in_source	proxy_workdir/taskd-1.1.0/scripts/l10n	/^def used_in_source(source, string):$/;"	f
utf8_character	proxy_workdir/taskd-1.1.0/src/utf8.cpp	/^std::string utf8_character (unsigned int codepoint)$/;"	f	typeref:typename:std::string
utf8_codepoint	proxy_workdir/taskd-1.1.0/src/utf8.cpp	/^unsigned int utf8_codepoint (const std::string& input)$/;"	f	typeref:typename:unsigned int
utf8_length	proxy_workdir/taskd-1.1.0/src/utf8.cpp	/^unsigned int utf8_length (const std::string& str)$/;"	f	typeref:typename:unsigned int
utf8_next_char	proxy_workdir/taskd-1.1.0/src/utf8.cpp	/^unsigned int utf8_next_char (const std::string& input, std::string::size_type& i)$/;"	f	typeref:typename:unsigned int
utf8_sequence	proxy_workdir/taskd-1.1.0/src/utf8.cpp	/^int utf8_sequence (unsigned int character)$/;"	f	typeref:typename:int
utf8_substr	proxy_workdir/taskd-1.1.0/src/utf8.cpp	/^const std::string utf8_substr ($/;"	f	typeref:typename:const std::string
utf8_text_length	proxy_workdir/taskd-1.1.0/src/utf8.cpp	/^unsigned int utf8_text_length (const std::string& str)$/;"	f	typeref:typename:unsigned int
utf8_text_width	proxy_workdir/taskd-1.1.0/src/utf8.cpp	/^unsigned int utf8_text_width (const std::string& str)$/;"	f	typeref:typename:unsigned int
utf8_width	proxy_workdir/taskd-1.1.0/src/utf8.cpp	/^unsigned int utf8_width (const std::string& str)$/;"	f	typeref:typename:unsigned int
uuid	proxy_workdir/taskd-1.1.0/src/util.cpp	/^const std::string uuid ()$/;"	f	typeref:typename:const std::string
uuid_unparse_lower	proxy_workdir/taskd-1.1.0/src/util.cpp	/^void uuid_unparse_lower (uuid_t uu, char *out)$/;"	f	typeref:typename:void
valid	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^bool Date::valid (const int d, const int y)$/;"	f	class:Date	typeref:typename:bool
valid	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^bool Date::valid (const int m, const int d, const int y)$/;"	f	class:Date	typeref:typename:bool
valid	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^bool Date::valid (const int m, const int d, const int y, const int hr,$/;"	f	class:Date	typeref:typename:bool
valid	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^bool Date::valid (const std::string& input, const std::string& format)$/;"	f	class:Date	typeref:typename:bool
valid	proxy_workdir/taskd-1.1.0/src/Duration.cpp	/^bool Duration::valid (const std::string& input)$/;"	f	class:Duration	typeref:typename:bool
validate	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^void Task::validate (bool applyDefault \/* = true *\/)$/;"	f	class:Task	typeref:typename:void
validate_before	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^void Task::validate_before (const std::string& left, const std::string& right)$/;"	f	class:Task	typeref:typename:void
value	proxy_workdir/taskd-1.1.0/src/JSON.h	/^    value () {}$/;"	f	class:json::value
value	proxy_workdir/taskd-1.1.0/src/JSON.h	/^  class value$/;"	c	namespace:json
ver_cmp	install/functions.src.sh	/^ver_cmp() {$/;"	f
verify_certificate	proxy_workdir/taskd-1.1.0/src/TLSClient.cpp	/^int TLSClient::verify_certificate () const$/;"	f	class:TLSClient	typeref:typename:int
verify_certificate	proxy_workdir/taskd-1.1.0/src/TLSServer.cpp	/^int TLSTransaction::verify_certificate () const$/;"	f	class:TLSTransaction	typeref:typename:int
verify_certificate	proxy_workdir/taskd-1.1.0/src/tls/TLSClient.cpp	/^int TLSClient::verify_certificate () const$/;"	f	class:TLSClient	typeref:typename:int
verify_certificate	proxy_workdir/taskd-1.1.0/src/tls/TLSServer.cpp	/^int TLSTransaction::verify_certificate () const$/;"	f	class:TLSTransaction	typeref:typename:int
verify_certificate_callback	proxy_workdir/taskd-1.1.0/src/TLSClient.cpp	/^static int verify_certificate_callback (gnutls_session_t session)$/;"	f	typeref:typename:int	file:
verify_certificate_callback	proxy_workdir/taskd-1.1.0/src/TLSServer.cpp	/^static int verify_certificate_callback (gnutls_session_t session)$/;"	f	typeref:typename:int	file:
verify_certificate_callback	proxy_workdir/taskd-1.1.0/src/tls/TLSClient.cpp	/^static int verify_certificate_callback (gnutls_session_t session)$/;"	f	typeref:typename:int	file:
verify_certificate_callback	proxy_workdir/taskd-1.1.0/src/tls/TLSServer.cpp	/^static int verify_certificate_callback (gnutls_session_t session)$/;"	f	typeref:typename:int	file:
waiting	proxy_workdir/taskd-1.1.0/src/Task.h	/^  enum status {pending, completed, deleted, recurring, waiting};$/;"	e	enum:Task::status
warning	proxy_workdir/taskd-1.1.0/scripts/profile.py	/^warning         = re.compile('WARNING')$/;"	v
week	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^int Date::week () const$/;"	f	class:Date	typeref:typename:int
weekOfYear	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^int Date::weekOfYear (int weekStart) const$/;"	f	class:Date	typeref:typename:int
weekStart	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^static const std::string weekStart = "monday";$/;"	v	typeref:typename:const std::string	file:
white	proxy_workdir/taskd-1.1.0/src/Color.h	/^  enum color_id {nocolor = 0, black, red, green, yellow, blue, magenta, cyan, white};$/;"	e	enum:Color::color_id
writable	proxy_workdir/taskd-1.1.0/src/Path.cpp	/^bool Path::writable () const$/;"	f	class:Path	typeref:typename:bool
write	proxy_workdir/taskd-1.1.0/src/File.cpp	/^bool File::write ($/;"	f	class:File	typeref:typename:bool
write	proxy_workdir/taskd-1.1.0/src/File.cpp	/^bool File::write (const std::string& name, const std::string& contents)$/;"	f	class:File	typeref:typename:bool
write	proxy_workdir/taskd-1.1.0/src/File.cpp	/^void File::write (const std::string& line)$/;"	f	class:File	typeref:typename:void
write	proxy_workdir/taskd-1.1.0/src/File.cpp	/^void File::write (const std::vector <std::string>& lines)$/;"	f	class:File	typeref:typename:void
write	proxy_workdir/taskd-1.1.0/src/Log.cpp	/^void Log::write (const std::string& line, bool multiline \/* = false *\/)$/;"	f	class:Log	typeref:typename:void
writePidFile	proxy_workdir/taskd-1.1.0/src/Server.cpp	/^void Server::writePidFile ()$/;"	f	class:Server	typeref:typename:void
year	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^int Date::year () const$/;"	f	class:Date	typeref:typename:int
yellow	proxy_workdir/taskd-1.1.0/src/Color.h	/^  enum color_id {nocolor = 0, black, red, green, yellow, blue, magenta, cyan, white};$/;"	e	enum:Color::color_id
~Color	proxy_workdir/taskd-1.1.0/src/Color.cpp	/^Color::~Color ()$/;"	f	class:Color
~Database	proxy_workdir/taskd-1.1.0/src/Database.cpp	/^Database::~Database ()$/;"	f	class:Database
~Date	proxy_workdir/taskd-1.1.0/src/Date.cpp	/^Date::~Date ()$/;"	f	class:Date
~Directory	proxy_workdir/taskd-1.1.0/src/Directory.cpp	/^Directory::~Directory ()$/;"	f	class:Directory
~Duration	proxy_workdir/taskd-1.1.0/src/Duration.cpp	/^Duration::~Duration ()$/;"	f	class:Duration
~File	proxy_workdir/taskd-1.1.0/src/File.cpp	/^File::~File ()$/;"	f	class:File
~HighResTimer	proxy_workdir/taskd-1.1.0/src/Timer.cpp	/^HighResTimer::~HighResTimer ()$/;"	f	class:HighResTimer
~Log	proxy_workdir/taskd-1.1.0/src/Log.cpp	/^Log::~Log ()$/;"	f	class:Log
~Msg	proxy_workdir/taskd-1.1.0/src/Msg.cpp	/^Msg::~Msg ()$/;"	f	class:Msg
~Nibbler	proxy_workdir/taskd-1.1.0/src/Nibbler.cpp	/^Nibbler::~Nibbler ()$/;"	f	class:Nibbler
~Path	proxy_workdir/taskd-1.1.0/src/Path.cpp	/^Path::~Path ()$/;"	f	class:Path
~RX	proxy_workdir/taskd-1.1.0/src/RX.cpp	/^RX::~RX ()$/;"	f	class:RX
~Server	proxy_workdir/taskd-1.1.0/src/Server.cpp	/^Server::~Server ()$/;"	f	class:Server
~TLSClient	proxy_workdir/taskd-1.1.0/src/TLSClient.cpp	/^TLSClient::~TLSClient ()$/;"	f	class:TLSClient
~TLSClient	proxy_workdir/taskd-1.1.0/src/tls/TLSClient.cpp	/^TLSClient::~TLSClient ()$/;"	f	class:TLSClient
~TLSServer	proxy_workdir/taskd-1.1.0/src/TLSServer.cpp	/^TLSServer::~TLSServer ()$/;"	f	class:TLSServer
~TLSServer	proxy_workdir/taskd-1.1.0/src/tls/TLSServer.cpp	/^TLSServer::~TLSServer ()$/;"	f	class:TLSServer
~TLSTransaction	proxy_workdir/taskd-1.1.0/src/TLSServer.cpp	/^TLSTransaction::~TLSTransaction ()$/;"	f	class:TLSTransaction
~TLSTransaction	proxy_workdir/taskd-1.1.0/src/tls/TLSServer.cpp	/^TLSTransaction::~TLSTransaction ()$/;"	f	class:TLSTransaction
~Task	proxy_workdir/taskd-1.1.0/src/Task.cpp	/^Task::~Task ()$/;"	f	class:Task
~Timer	proxy_workdir/taskd-1.1.0/src/Timer.cpp	/^Timer::~Timer ()$/;"	f	class:Timer
~array	proxy_workdir/taskd-1.1.0/src/JSON.cpp	/^json::array::~array ()$/;"	f	class:json::array
~literal	proxy_workdir/taskd-1.1.0/src/JSON.h	/^    ~literal () {}$/;"	f	class:json::literal
~number	proxy_workdir/taskd-1.1.0/src/JSON.h	/^    ~number () {}$/;"	f	class:json::number
~object	proxy_workdir/taskd-1.1.0/src/JSON.cpp	/^json::object::~object ()$/;"	f	class:json::object
~string	proxy_workdir/taskd-1.1.0/src/JSON.h	/^    ~string () {}$/;"	f	class:json::string
~value	proxy_workdir/taskd-1.1.0/src/JSON.h	/^    virtual ~value () {}$/;"	f	class:json::value
